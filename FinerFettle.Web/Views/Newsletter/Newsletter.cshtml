@model ViewModels.Newsletter.NewsletterViewModel
@using Models.Exercise
@using Models.Newsletter
@using Extensions
@using Controllers

@* null layout, document should still have a title *@
<title>Newsletter - Finer Fettle</title>

@{
    Layout = "_Blank";
}

<div style="margin-block:1rem;">
    <h6 style="margin-block:0;"><i>@DateTime.Today.ToLongDateString()</i></h6>
    <h1 style="margin-block:0;">Workout Routine</h1>
    <h4 style="margin-block:0;display:inline-block;">@Html.DisplayFor(m => Model.ExerciseType)</h4>
    @if (Model.MuscleGroups != null)
    {
        <span> - </span>
        @if (Model.Verbosity.HasFlag(Verbosity.Detailed))
        {
            <span>@Model.MuscleGroups.GetDisplayName32()</span>
        } 
        else 
        {
            <span>@Model.MuscleGroups.GetSingleDisplayName()</span>
        }
    }
</div>

@if (Model.ExerciseType.HasAnyFlag32(ExerciseType.Flexibility | ExerciseType.Stability))
{
    <div style="background-color:lightyellow;padding:1rem;margin-block:1rem;">
        <span>Consider a full-body Yoga, Pilates or Tai-Chi workout as an alternative for today.</span>
    </div>
}

<div style="margin-block:1rem;">
    @if (Model.WarmupExercises != null && Model.WarmupExercises.Any())
    {
        <h2 style="margin-bottom:0;color:palevioletred">Warmup</h2>
        <div style="display:flex;flex-flow:row wrap;gap:1ch;">
            @foreach (var item in Model.WarmupExercises)
            {
                @await Component.InvokeAsync("Exercise", new { Model.User, ViewModel = item, Model.Verbosity })
            }
        </div>
    }

    <h2 style="margin-bottom:0;color:palegreen;">Workout</h2>
    <div style="display:flex;flex-flow:row wrap;gap:1ch;">
        @foreach (var item in Model.Exercises)
        {
            @await Component.InvokeAsync("Exercise", new { Model.User, ViewModel = item, Model.Verbosity })
        }
    </div>

    @if (Model.CooldownExercises != null && Model.CooldownExercises.Any())
    {
        <h2 style="margin-bottom:0;color:lightskyblue">Cooldown</h2>
        <div style="display:flex;flex-flow:row wrap;gap:1ch;">
            @foreach (var item in Model.CooldownExercises)
            {
                @await Component.InvokeAsync("Exercise", new { Model.User, ViewModel = item, Model.Verbosity })
            }
        </div>
    }
</div>

<div style="background-color:lightyellow;padding:1rem;margin-block:1rem;">
    @await Component.InvokeAsync("Footnote", new { Count = Model.FootnoteCount })
</div>

@if (Model.Demo == false) 
{
    @if (Model.User != null)
    {
        <a href="@Url.ActionLink(nameof(UserController.INeedRest), UserController.Name, new { Model.User.Email })">Skip next workout</a>
 
        <hr style="margin-top:1ex;margin-bottom:1ex;">
        <a href="@Url.ActionLink(nameof(UserController.Edit), UserController.Name, new { Model.User.Email })">Manage Preferences</a>    
    
        <hr style="margin-top:1ex;margin-bottom:1ex;">
        <a href="@Url.ActionLink(nameof(UserController.Delete), UserController.Name, new { Model.User.Email })">Unsubscribe</a>    
    }

    <hr style="margin-top:1ex;margin-bottom:1ex;">
    <a href="@Url.AbsoluteContent("~/images/ATTRIBUTION.html")">Image attribution</a>

    <hr style="margin-top:1ex;margin-bottom:1ex;">
    <span>Questions? Comments? Issues? <a href="mailto:help@finerfettle.com">Contact us</a> at help@finerfettle.com</span>
} 
else 
{
    <script>
        // Navigated back to the newsletter from the 'Too easy?'/'Too hard?' links. Refresh the demo content.
        if (!!window.performance && window.performance.navigation.type === 2) {
            window.location.reload();
        }
    </script>
}