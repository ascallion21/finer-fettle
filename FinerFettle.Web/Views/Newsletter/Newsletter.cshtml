@model ViewModels.Newsletter.NewsletterViewModel
@using Models.Exercise
@using Models.Newsletter
@using Extensions
@using Controllers
@using ViewModels.Newsletter

@{
    ViewData["Title"] = "Newsletter";
    Layout = "_Blank";
}

<partial name="Newsletter/_Preview" model='$"{Model.Newsletter.NewsletterRotation.ExerciseType.GetSingleDisplayName()}:{Model.Newsletter.NewsletterRotation.IntensityLevel.GetSingleDisplayName()} - {Model.Newsletter.NewsletterRotation.MuscleGroups.GetSingleDisplayName()}"' />

<div style="margin-block:1rem;">
    <h6 style="margin-block:0;"><i>@DateTime.UtcNow.ToLongDateString()</i></h6>
    <h1 style="margin-block:0;">Daily Workout</h1>
    <h4 style="margin-block:0;display:inline-block;">@Model.Newsletter.NewsletterRotation.ExerciseType.GetSingleDisplayName():@Model.Newsletter.NewsletterRotation.IntensityLevel.GetSingleDisplayName()</h4>
    <small>
        <span> - </span>
        @if (Model.Verbosity.HasFlag(Verbosity.Diagnostic))
        {
            <span>@Model.Newsletter.NewsletterRotation.MuscleGroups.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</span>
        }
        else if (Model.Verbosity.HasFlag(Verbosity.Detailed))
        {
            <span>@Model.Newsletter.NewsletterRotation.MuscleGroups.GetDisplayName32(EnumExtensions.DisplayNameType.GroupName)</span>
        }
        else
        {
            <span>@Model.Newsletter.NewsletterRotation.MuscleGroups.GetSingleDisplayName()</span>
        }
    </small>
    
</div>

@if (Model.User.LastActive == null) 
{
    <div style="background-color:honeydew;padding:1rem;margin-block:1rem;">
        <div>Thank you for subscribing to receive workout emails from Finer Fettle!</div>
        <div>Please <a href="@Url.StillHereLink(Model.User.Email, Model.User.Token, null)">confirm your account</a> or interact with this email to continue receiving workouts.</div>
        <br>
        <div><small>Not you? Ignore this email or <a href="@Url.ActionLink(nameof(UserController.Delete), UserController.Name, new { Model.User.Email, Model.User.Token })">delete your account</a> to unsubscribe.</small></div>
    </div>
}
else if (Model.User.IsAlmostInactive)
{
    <div style="background-color:antiquewhite;padding:1rem;margin-block:1rem;">
        <span>Your account is at risk of being deactivated for inactivity. Please click <a href="@Url.StillHereLink(Model.User.Email, Model.User.Token, null)">here</a> to continue receiving emails.</span>
    </div>
}

<div style="margin-block:1rem;">
    @if (Model.LeastSeenExercises != null && Model.LeastSeenExercises.Any())
    {
        <h2 style="margin-bottom:.1em;color:lightsalmon">Least Seen</h2>
        <div style="display:flex;flex-flow:row wrap;gap:1ch;">
            @foreach (var item in Model.LeastSeenExercises)
            {
                @await Component.InvokeAsync("Exercise", new { Model.User, ViewModel = item })
            }
        </div>
    }

    @if (Model.RecoveryExercises != null && Model.RecoveryExercises.Any())
    {
        <h2 style="margin-bottom:.1em;color:palevioletred">Recovery: @Model.User!.RecoveryMuscle.GetSingleDisplayName()</h2>
        <div style="display:flex;flex-flow:row wrap;gap:1ch;">
            @foreach (var item in Model.RecoveryExercises)
            {
                @await Component.InvokeAsync("Exercise", new { Model.User, ViewModel = item })
            }
        </div>
    }

    @if (Model.WarmupExercises != null && Model.WarmupExercises.Any())
    {
        if (Model.User.RecoveryMuscle != MuscleGroups.None)
        {
            <div style="background-color:lightyellow;padding:1rem;margin-top:1.5rem;margin-bottom:-.5rem;">
                <span>You have a recovery muscle group set. This workout is excluding exercises that may stress your @Model.User.RecoveryMuscle.GetSingleDisplayName().</span>
            </div>
        }
        <h2 style="margin-bottom:.1em;color:palevioletred">Warmup</h2>
        <div style="display:flex;flex-flow:row wrap;gap:1ch;">
            @foreach (var item in Model.WarmupExercises)
            {
                @await Component.InvokeAsync("Exercise", new { Model.User, ViewModel = item })
            }
        </div>
    }

    @if (Model.Newsletter.IsDeloadWeek)
    {
        <div style="background-color:lightyellow;padding:1rem;margin-top:1.5rem;margin-bottom:-.5rem;">
            <span>It's time to deload for a week. Scale down the intensity of your workout by ~50%. Take this time to rest and recover. You've earned it!</span>
        </div>
    }
    <h2 style="margin-bottom:.1em;color:palegreen;">Workout</h2>
    <div style="display:flex;flex-flow:row wrap;gap:1ch;">
        @foreach (var item in Model.Exercises)
        {
            @await Component.InvokeAsync("Exercise", new { Model.User, ViewModel = item })
        }
    </div>

    @if (Model.SportsExercises != null && Model.SportsExercises.Any())
    {
        <h2 style="margin-bottom:.1em;color:palegreen">Sport: @Model.User!.SportsFocus.GetSingleDisplayName()</h2>
        <div style="display:flex;flex-flow:row wrap;gap:1ch;">
            @foreach (var item in Model.SportsExercises)
            {
                @await Component.InvokeAsync("Exercise", new { Model.User, ViewModel = item })
            }
        </div>
    }

    @if (Model.CooldownExercises != null && Model.CooldownExercises.Any())
    {
        if (Model.Newsletter.NewsletterRotation.ExerciseType.HasAnyFlag32(ExerciseType.Stability))
        {
            <div style="background-color:floralwhite;padding:1rem;margin-top:1.5rem;margin-bottom:-.5rem;">
                <span>Consider a full-body Yoga, Pilates or Tai-Chi workout as an alternative to today's cooldown.</span>
            </div>
        }
        <h2 style="margin-bottom:.1em;color:lightskyblue">Cooldown</h2>
        <div style="display:flex;flex-flow:row wrap;gap:1ch;">
            @foreach (var item in Model.CooldownExercises)
            {
                @await Component.InvokeAsync("Exercise", new { Model.User, ViewModel = item })
            }
        </div>
    }
</div>

<div style="background-color:lavender;padding:1rem;margin-block:1rem;">
    @await Component.InvokeAsync("Footnote", new { Count = Model.FootnoteCount })
</div>

@if (Model.Demo != true)
{
    <hr style="margin-block:1ex;">
    <a href="@Url.StillHereLink(Model.User.Email, Model.User.Token, Url.ActionLink(nameof(UserController.Edit), UserController.Name, new { Model.User.Email, Model.User.Token }))">Manage Preferences</a>
    <div><small><b>Rest Days</b> - @Model.User.RestDays.GetSingleDisplayName()</small></div>
    <div><small><b>Strengthening Preference</b> - @Model.User.StrengtheningPreference</small></div>
    <div><small><b>Prefers Weights</b> - @Model.User.PrefersWeights</small></div>
    <div><small><b>Sports Focus</b> - @Model.User.SportsFocus.GetSingleDisplayName()</small></div>
    <div><small><b>Recovery Muscle</b> - @Model.User.RecoveryMuscle.GetSingleDisplayName()</small></div>
    <div><small><b>Equipment</b> - @Html.DisplayFor(_ => Model.AllEquipment)</small></div>
    <div><small><b>Ignored Exercises</b> - @String.Join(", ", Model.User.UserExercises.Where(ep => ep.Ignore).Select(ep => ep.Exercise.Name))</small></div>

    <hr style="margin-block:1ex;">
    <a href="@Url.ActionLink(nameof(UserController.Delete), UserController.Name, new { Model.User.Email, Model.User.Token })">Unsubscribe</a>

    <hr style="margin-block:1ex;">
    <a href="@Url.PageLink("/ImageAttribution")">Image Attribution</a>

    <hr style="margin-block:1ex;">
    <span>
        <a href="@Url.PageLink("/Terms")">Terms of Use</a> | <a href="@Url.PageLink("/Privacy")">Privacy</a>
    </span>

    <hr style="margin-block:1ex;">
    <span>Questions? Comments? Issues? Contact us at <a href="mailto:help@finerfettle.com">help@finerfettle.com</a></span>
} 
else 
{
    <script>
        // Navigated back to the newsletter from the 'Too easy?'/'Too hard?' links. Refresh the demo content.
        if (!!window.performance && window.performance.navigation.type === 2) {
            // Refreshing the parent so the loading icon shows up
            window.parent.location.reload();
        }
    </script>
}