@model ViewModels.Newsletter.NewsletterViewModel
@using Models.Exercise
@using Extensions
@using Controllers

@{
    ViewData["Title"] = "Newsletter";
}

<h1>Daily Workout Routine</h1>
<h6>@DateTime.Today.ToLongDateString()</h6>

<br />

@if (Model.Exercises != null && Model.Exercises.Any()) {
    if (Model.WarmupExercises != null && Model.WarmupExercises.Any())
    {
        <h3>Warmup</h3>
        @await Html.PartialAsync("Exercises", Model.WarmupExercises)
    }
    <h3>Routine</h3><span> (@Html.DisplayFor(m => Model.ExerciseType) - @Html.DisplayFor(m => Model.MuscleGroups))</span>
    @await Html.PartialAsync("Exercises", Model.Exercises)
}
else {
    @await Html.PartialAsync("Rest")
}

<hr />

@await Component.InvokeAsync("Footnote", new { Count = Model.FootnoteCount })

<hr />

@if (Model.User != null)
{
    <a href="@Url.ActionLink(nameof(UserController.ThatWorkoutWasEasy), UserController.Name, new { Model.User.Email })">This workout was too easy</a>
    <span> | </span>
    <a href="@Url.ActionLink(nameof(UserController.ThatWorkoutWasTough), UserController.Name, new { Model.User.Email })">This workout was too hard</a>
    <br /><a href="@Url.ActionLink(nameof(UserController.Edit), UserController.Name, new { Model.User.Email })">Manage Preferences</a>    
    
    <hr />
    
    <a href="@Url.ActionLink(nameof(UserController.Delete), UserController.Name, new { Model.User.Email })">Unsubscribe</a>    
}

<hr />

<a href="@Url.AbsoluteContent("~/images/ATTRIBUTION.html")">Image attribution</a>
