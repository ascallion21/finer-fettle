@model ViewModels.Exercise.ExercisesViewModel
@using Models.Exercise
@using Models.Newsletter
@using Models.User
@using Extensions
@using Controllers
@using System.Numerics

@{
    ViewData["Title"] = "Exercises";
    Layout = "_Blank";
}

<details @(Model.FormHasData ? "open" : "") style="position:fixed;top:0;right:0;background-color:ghostwhite;padding:1rem;z-index:1;">
    <summary>Filter Exercises</summary>

    <form asp-controller="@ExerciseController.Name" asp-action="@nameof(ExerciseController.All)" method="get">
        <div class="form-group mb-3">
            <label asp-for="SportsFocus" class="control-label">@Html.DisplayNameFor(m => m.SportsFocus)</label>
            <select asp-for="SportsFocus" class="form-control" aria-describedby="sports-help"
                    asp-items='Enum.GetValues(typeof(SportsFocus)).Cast<SportsFocus>().Select(v => new SelectListItem { Text = v.GetSingleDisplayName(), Value = ((int)v).ToString() }).Prepend(new SelectListItem() { Text = "Null" })'>
            </select>
        </div>
        <div class="form-group mb-3">
            <label asp-for="RecoveryMuscle" class="control-label">@Html.DisplayNameFor(m => m.RecoveryMuscle)</label>
            <select asp-for="RecoveryMuscle" class="form-control" aria-describedby="recovery-help"
                    asp-items='Enum.GetValues(typeof(MuscleGroups)).Cast<MuscleGroups>().Where(mg => BitOperations.PopCount((ulong)mg) <= 1).Select(v => new SelectListItem { Text = v.GetSingleDisplayName(), Value = ((int)v).ToString() }).Prepend(new SelectListItem() { Text = "Null" })'>
            </select>
        </div>
        <div class="form-group mb-3">
            <label asp-for="ShowFilteredOut" class="control-label">@Html.DisplayNameFor(m => m.ShowFilteredOut)</label>
            <input class="form-check-input" asp-for="ShowFilteredOut" aria-describedby="weights-help" />
        </div>
        <div class="form-group">
            <input type="submit" value="Filter" class="btn btn-primary" />
        </div>
    </form>
</details>

<div>
    @foreach (var group in Model.Exercises.GroupBy(e => e.Exercise.Name).OrderBy(e => e.Key))
    {
        <h2 style="margin-bottom:.1em;color:palegreen;">@group.Key</h2>
        @if (group.First().Exercise.Prerequisites.Any() && Model.Verbosity.HasFlag(Verbosity.Detailed))
        {
            <div><small><b>Requires proficiency in</b>: @String.Join(", ", group.First().Exercise.Prerequisites.Select(e => e.PrerequisiteExercise.Name))</small></div>
        }
        <div style="margin-top:.1rem;display:flex;flex-flow:row wrap;gap:1ch;">
            @foreach (var item in group)
            {
                <div style="opacity:@(item.IsShy ? ".4" : "1")">
                    @await Component.InvokeAsync("Exercise", new { ViewModel = item })
                </div>
            }
        </div>
    }
</div>

<div style="margin-block-start:1ex;">
    <a href="@Url.PageLink("/ImageAttribution")">Image Attribution</a>
</div>
