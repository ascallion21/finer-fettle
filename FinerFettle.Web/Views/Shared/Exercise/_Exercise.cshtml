@model ViewModels.Newsletter.ExerciseViewModel
@using Controllers
@using Microsoft.AspNetCore.Http.Extensions
@using Extensions
@using Models.Exercise
@using Models.Newsletter
@using ViewModels.Newsletter

@{ 
    var borderColor = Model.Theme switch
    {
        ExerciseTheme.Main => "palegreen",
        ExerciseTheme.Cooldown => "lightskyblue",
        ExerciseTheme.Warmup => "palevioletred",
        ExerciseTheme.Other => "lightsalmon",
        _ => "currentColor"
    };

    var backgroundColor = Model.Theme switch
    {
        ExerciseTheme.Main => "rgba(200,255,200,.1)",
        ExerciseTheme.Cooldown => "rgba(200,200,255,.1)",
        ExerciseTheme.Warmup => "rgba(255,200,200,.1)",
        ExerciseTheme.Other => "rgba(255,191,119,.1)",
        _ => "transparent"
    };
}

<div style="flex:1 0 200px;padding:10px;position:relative;display:flex;flex-direction:column;justify-content:space-between;
            border-bottom:4px @(Model.Verbosity.HasFlag(Verbosity.Normal) ? "solid" : "none");border-image-slice:1;outline:1px solid @borderColor;background-color:@backgroundColor;
            border-image-source:linear-gradient(90deg, transparent @(Model.ExerciseVariation.Progression.Min ?? 0)%, @borderColor @(Model.ExerciseVariation.Progression.Min ?? 0)% @(Model.ExerciseVariation.Progression.Max ?? 100)%, transparent @(Model.ExerciseVariation.Progression.Max ?? 100)%);">
    <div>
        <h3 style="margin-block:0;">
            @{
                var defaultInstruction = Model.Variation.EquipmentGroups.SingleOrDefault(eg => !eg.Equipment.Any())?.Instruction;
            }
            @if (String.IsNullOrEmpty(defaultInstruction))
            {
                <span style="text-decoration:underline;">@(Model.Variation.Name ?? Model.Exercise.Name)</span>
            }
            else 
            {
                <a target="_blank" href="@(Model.User != null ? Url.StillHereLink(Model.User.Email, Model.User.Token, defaultInstruction) : defaultInstruction)">
                    @(Model.Variation.Name ?? Model.Exercise.Name)
                </a>
            }
        </h3>

        @if (Model.Variation.EquipmentGroups.Any(eg => eg.Equipment.Any()) == true)
        {
            <ul style="margin-block:1ex;padding-inline-start:2ch;">
                @foreach (var equipmentGroup in Model.Variation.EquipmentGroups
                    .Where(eg => eg.Equipment.Any())
                    .Where(eg => eg.Parent == null)
                    // Only show the optional equipment groups that the user owns equipment out of
                    .Where(eg => Model.User == null || Model.User.EquipmentIds.Intersect(eg.Equipment.Select(e => e.Id)).Any())
                    .OrderByDescending(eg => eg.Children.Any()))
                {
                    <li style="line-height:1;list-style-type:@(equipmentGroup.Children.Any() ? "circle" : "disc")">
                        <small><partial name="Exercise/_EquipmentGroup" model="new EquipmentGroupViewModel(equipmentGroup, Model.User)" /></small>
                        @if (equipmentGroup.Children.Any()) 
                        {
                            <ul style="margin-block:0;padding-inline-start:2ch;">
                                @foreach (var childEquipmentGroup in equipmentGroup.Children
                                    .Where(eg => eg.Equipment.Any())
                                    // Only show the optional equipment groups that the user owns equipment out of
                                    .Where(eg => Model.User == null || Model.User.EquipmentIds.Intersect(eg.Equipment.Select(e => e.Id)).Any())
                                    .OrderBy(eg => eg.IsWeight))
                                {
                                    <li style="line-height:1;list-style-type:disc">
                                        <small><partial name="Exercise/_EquipmentGroup" model="new EquipmentGroupViewModel(childEquipmentGroup, Model.User)" /></small>
                                    </li>
                                }
                            </ul>
                        }
                    </li>
                }
            </ul>
        }

        <div style="margin-block:1ex;">
            @Html.DisplayFor(m => Model.Proficiencies)
        </div>

        @if (Model.Verbosity.HasFlag(Verbosity.Detailed)) 
        {
            <div style="margin-block:1ex;font-size:x-small;"><b>Primary</b>: @Model.Variation.PrimaryMuscles.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
        }

        @if (Model.Verbosity.HasFlag(Verbosity.Diagnostic) && Model.Variation.SecondaryMuscles != MuscleGroups.None)
        {
            <div style="margin-block:1ex;font-size:x-small;"><b>Secondary</b>: @Model.Variation.SecondaryMuscles.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
        }

        @if (Model.Verbosity.HasFlag(Verbosity.Debug))
        {
            <div style="margin-block:1ex;">
                <b>Exercise Type</b> - @Model.ExerciseVariation.ExerciseType.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)
            </div>

            <div style="margin-block:1ex;">
                <b>Muscle Contractions</b> - @Model.Variation.MuscleContractions.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)
            </div>

            <div style="margin-block:1ex;">
                <b>Is Core</b> - @(!Model.ExerciseVariation.IsBonus)
            </div>

            <div style="margin-block:1ex;">
                <b>Is Weighted</b> - @Model.Variation.EquipmentGroups.Any(eg => eg.IsWeight)
            </div>

            <div style="margin-block:1ex;">
                <b>Is Unilateral</b> - @Model.Variation.Unilateral
            </div>
            
            if (Model.Exercise.SportsFocus != Models.User.SportsFocus.None)
            {
                <div style="margin-block:1ex;">
                    <b>Sports Focus</b> - @Model.Exercise.SportsFocus.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)
                </div>
            }
        }

        @if (Model.Verbosity.HasFlag(Verbosity.Minimal)) 
        {
            if (Model.InEmailContext)
            {
                <div style="height:200px;background-size:contain;background-repeat:no-repeat;background-image:url('@Url.AbsoluteContent($"~/images/{Model.Variation.ImageCode}")');"></div>
            }
            else 
            {
                <img style="height:200px;width:300px;object-fit:contain;object-position:left top;" height="200" width="300" loading="lazy"
                     src="@Url.AbsoluteContent($"~/images/{Model.Variation.ImageCode}")">
            }
        }
    </div>
    
    @if (Model.User != null && (Model.HasHigherProgressionVariation || Model.HasLowerProgressionVariation || (!Model.Demo && Model.Exercise.RecoveryMuscle == MuscleGroups.None)))
    {
        <small style="padding-top:1ex;display:flex">
            @if (Model.HasHigherProgressionVariation)
            {
                <a href="@Url.StillHereLink(Model.User.Email, Model.User.Token, Url.ActionLink(nameof(UserController.ThatWorkoutWasEasy), UserController.Name, new { Model.User.Email, Model.User.Token, ExerciseId = Model.Exercise.Id }))">Too easy?</a>
            }
            else if (!Model.Demo && Model.Exercise.IsPlainExercise)
            {
                <a href="@Url.StillHereLink(Model.User.Email, Model.User.Token, Url.ActionLink(nameof(UserController.IgnoreExercise), UserController.Name, new { Model.User.Email, Model.User.Token, ExerciseId = Model.Exercise.Id }))">Ignore?</a>
            }

            @if (Model.HasLowerProgressionVariation)
            {
                <a style="margin-left:auto" href="@Url.StillHereLink(Model.User.Email, Model.User.Token, Url.ActionLink(nameof(UserController.ThatWorkoutWasTough), UserController.Name, new { Model.User.Email, Model.User.Token, ExerciseId = Model.Exercise.Id }))">Too hard?</a>
            }
            else if (!Model.Demo && Model.Exercise.IsPlainExercise)
            {
                <a style="margin-left:auto" href="@Url.StillHereLink(Model.User.Email, Model.User.Token, Url.ActionLink(nameof(UserController.IgnoreExercise), UserController.Name, new { Model.User.Email, Model.User.Token, ExerciseId = Model.Exercise.Id }))">Ignore?</a>
            }
        </small>
    }

    @if (Model.Verbosity.HasFlag(Verbosity.Normal) && Model.UserExercise != null)
    {
        var progressionOutOfRange = Model.UserExercise.Progression < Model.ExerciseVariation.Progression.Min || Model.UserExercise.Progression > Model.ExerciseVariation.Progression.Max;
        <div style="position:absolute;bottom:0;left:calc(@Model.UserExercise.Progression% - 1ch);width:2ch;text-align:center;font-size:xx-small;line-height:1;@(progressionOutOfRange ? "color:red" : "")">
            &#9660;
        </div>
    }
    
    @if (Model.Verbosity.HasFlag(Verbosity.Diagnostic))
    {
        if (Model.ExerciseVariation.Progression.Min.HasValue) 
        {
            <div style="line-height:1;position:absolute;bottom:0;font-size:xx-small;font-weight:bold;
                        left:max(0%, calc(@Model.ExerciseVariation.Progression.Min% - @(Model.ExerciseVariation.Progression.Min.Value.ToString().Length)ch));">
                @Model.ExerciseVariation.Progression.Min
            </div>
        }

        if (Model.ExerciseVariation.Progression.Max.HasValue)
        {
            <div style="line-height:1;position:absolute;bottom:0;font-size:xx-small;font-weight:bold;
                        left:min(calc(100% - @(Model.ExerciseVariation.Progression.Max.Value.ToString().Length)ch), @Model.ExerciseVariation.Progression.Max%);">
                @Model.ExerciseVariation.Progression.Max
            </div>
        }
    }
</div>