@model ViewModels.Exercise.ExerciseSectionViewModel
@using Models.Newsletter
@using Entities.Exercise
@using Models.Exercise
@using Extensions

@if (Model.Exercises != null && Model.Exercises.Any())
{
    var titleColor = Model.Theme switch
    {
        ExerciseTheme.Main => "plum",
        ExerciseTheme.Cooldown => "lightskyblue",
        ExerciseTheme.Warmup => "palevioletred",
        ExerciseTheme.Other => "lightsalmon",
        ExerciseTheme.Extra => "palegreen",
        _ => "currentColor"
    };

    if (Model.Title != null) 
    {
        <h2 style="margin-bottom:.2rem;color:@titleColor">@Model.Title</h2>
        <div style="display:flex;flex-flow:row wrap;gap:1ch;">
            @foreach (var item in Model.Exercises)
            {
                <partial name="Exercise/_Exercise" model="item" />
            }
        </div>
    }
    else 
    {
        foreach (var group in Model.Exercises.GroupBy(e => e.Exercise).OrderBy(e => e.Key.Name))
        {
            <h2 style="margin-bottom:0;color:@titleColor;">@group.Key.Name</h2>
            @if (Model.Verbosity.HasFlag(Verbosity.Debug))
            {
                <p style="margin-block:0;"><b>Proficiency</b>: @group.Key.Proficiency</p>
                @if (group.Key.Prerequisites?.Any() == true) {
                    <p style="margin-block:0;"><b>Requires proficiency in</b>: @String.Join(", ", group.Key.Prerequisites.Select(e => e.PrerequisiteExercise.Name))</p>
                }
            }
            <div style="margin-top:.2rem;display:flex;flex-flow:row wrap;gap:1ch;">
                @foreach (var item in group)
                {
                    <partial name="Exercise/_Exercise" model="item" />
                }
            </div>
        }
    }
}