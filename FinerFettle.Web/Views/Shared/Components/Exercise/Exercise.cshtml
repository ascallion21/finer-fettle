@model ViewModels.Newsletter.ExerciseViewModel
@using Controllers
@using Microsoft.AspNetCore.Http.Extensions
@using Extensions
@using Models.Exercise
@using Models.Newsletter
@using ViewModels.Newsletter

@{ 
    var borderColor = Model.ActivityLevel switch
    {
        ExerciseActivityLevel.Main => "palegreen",
        ExerciseActivityLevel.Cooldown => "lightskyblue",
        ExerciseActivityLevel.Warmup => "palevioletred",
        ExerciseActivityLevel.Recovery => "darkgrey",
        _ => "currentColor"
    };

    var backgroundColor = Model.ActivityLevel switch
    {
        ExerciseActivityLevel.Main => "rgba(200,255,200,.1)",
        ExerciseActivityLevel.Cooldown => "rgba(200,200,255,.1)",
        ExerciseActivityLevel.Warmup => "rgba(255,200,200,.1)",
        ExerciseActivityLevel.Recovery => "rgba(100,100,100,.1)",
        _ => "transparent"
    };
}

<div style="flex:1 0 200px;padding:10px;position:relative;display:flex;flex-direction:column;justify-content:space-between;
            border-bottom:4px @(Model.Verbosity.HasFlag(Verbosity.Normal) ? "solid" : "none");border-image-slice:1;outline:1px solid @borderColor;background-color:@backgroundColor;
            border-image-source:linear-gradient(90deg, transparent @(Model.Intensity.Progression.Min ?? 0)%, @borderColor @(Model.Intensity.Progression.Min ?? 0)% @(Model.Intensity.Progression.Max ?? 100)%, transparent @(Model.Intensity.Progression.Max ?? 100)%);">
    <div>
        <h3 style="margin-block:0;">
            @{
                var defaultInstruction = Model.Intensity.EquipmentGroups.SingleOrDefault(eg => !eg.Equipment.Any())?.Instruction;
            }
            @if (String.IsNullOrEmpty(defaultInstruction))
            {
                <span>@(Model.Intensity.Name ?? Model.Exercise.Name)</span>
            }
            else 
            {
                <a target="_blank" href="@defaultInstruction">
                    @(Model.Intensity.Name ?? Model.Exercise.Name)
                </a>
            }
        </h3>

        <h5 style="margin-block:1ex;">@Html.DisplayFor(m => Model.IntensityPreference)</h5>
          
        @if (Model.Intensity.EquipmentGroups?.Any(eg => eg.Equipment.Any()) == true)
        {
            <ul style="margin-block:1ex;padding-inline-start:2ch;">
                @foreach (var equipmentGroup in Model.Intensity.EquipmentGroups
                    .Where(eg => eg.Equipment.Any())
                    // Only show the optional equipment groups that the user owns equipment out of
                    .Where(eg => Model.User == null || Model.User.EquipmentIds.Intersect(eg.Equipment.Select(e => e.Id)).Any())
                    .OrderByDescending(eg => eg.Required))
                {
                    <li style="list-style-type:@(equipmentGroup.Required ? "disc" : "circle")">
                        <small><partial name="Components/Exercise/_EquipmentGroup" model="new EquipmentGroupViewModel(equipmentGroup, Model.User)" /></small>
                    </li>
                }
            </ul>
        }

        @if (Model.Verbosity.HasFlag(Verbosity.Detailed)) 
        {
            <div style="margin-block:1ex;font-size:x-small;">@Model.Exercise.Muscles.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
        }

        @if (Model.Verbosity.HasFlag(Verbosity.Minimal)) 
        {
            <div style="height:200px;background-size:contain;background-repeat:no-repeat;background-image:url('@Url.AbsoluteContent($"~/images/{Model.Variation.Code}.webp")'),url('@Url.AbsoluteContent($"~/images/{Model.Variation.Code}.jpg")');"></div>
        }
    </div>
    
    @if (Model.User != null && (Model.HasHigherProgressionVariation || Model.HasLowerProgressionVariation))
    {
        <small style="padding-top:1ex;display:flex">
            @if (Model.HasHigherProgressionVariation)
            {
                <a href="@Url.ActionLink(nameof(UserController.ThatWorkoutWasEasy), UserController.Name, new { Model.User.Email, ExerciseId = Model.Exercise.Id, Model.Demo })">Too easy?</a>
            }
            @if (Model.HasLowerProgressionVariation)
            {
                <a style="margin-left:auto" href="@Url.ActionLink(nameof(UserController.ThatWorkoutWasTough), UserController.Name, new { Model.User.Email, ExerciseId = Model.Exercise.Id, Model.Demo })">Too hard?</a>
            }
        </small>
    }

    @if (Model.Verbosity.HasFlag(Verbosity.Normal) && Model.UserProgression != null)
    {
        var progressionOutOfRange = Model.UserProgression.Progression < Model.Intensity.Progression.Min || Model.UserProgression.Progression > Model.Intensity.Progression.Max;
        <div style="position:absolute;bottom:0;left:calc(@Model.UserProgression.Progression% - 1ch);width:2ch;text-align:center;font-size:xx-small;line-height:1;@(progressionOutOfRange ? "color:red" : "")">
            &#9660;
        </div>
        @if (progressionOutOfRange && Model.User != null) {
            <div style="position:absolute;bottom:0;left:calc(@Model.User.AverageProgression% - 1ch);width:2ch;text-align:center;font-size:xx-small;line-height:1;">
                &#8704;
            </div>
        }
    }
    
    @if (Model.Verbosity.HasFlag(Verbosity.Diagnostic))
    {
        if (Model.Intensity.Progression.Min.HasValue) 
        {
            <div style="position:absolute;bottom:0;font-size:xx-small;font-weight:bold;
                        left:max(0%, calc(@Model.Intensity.Progression.Min% - @(Model.Intensity.Progression.Min.Value.ToString().Length)ch));">
                @Model.Intensity.Progression.Min
            </div>
        }

        if (Model.Intensity.Progression.Max.HasValue)
        {
            <div style="position:absolute;bottom:0;font-size:xx-small;font-weight:bold;
                        left:min(calc(100% - @(Model.Intensity.Progression.Max.Value.ToString().Length)ch), @Model.Intensity.Progression.Max%);">
                @Model.Intensity.Progression.Max
            </div>
        }
    }
</div>