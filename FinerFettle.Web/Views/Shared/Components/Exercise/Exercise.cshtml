@model ViewModels.Newsletter.ExerciseViewModel
@using Controllers
@using Microsoft.AspNetCore.Http.Extensions
@using Extensions
@using Models.Exercise
@using ViewModels.Newsletter

@{ 
    var borderColor = Model.ActivityLevel switch
    {
        ExerciseActivityLevel.Main => "palegreen",
        ExerciseActivityLevel.Cooldown => "lightskyblue",
        ExerciseActivityLevel.Warmup => "palevioletred",
        _ => "currentColor"
    };

    var backgroundColor = Model.ActivityLevel switch
    {
        ExerciseActivityLevel.Main => "rgba(200,255,200,.1)",
        ExerciseActivityLevel.Cooldown => "rgba(200,200,255,.1)",
        ExerciseActivityLevel.Warmup => "rgba(255,200,200,.1)",
        _ => "transparent"
    };
}

<div style="flex:1 0 200px;outline:1px solid @borderColor;padding:10px;position:relative;display:flex;flex-direction:column;justify-content:space-between;background-color:@backgroundColor;
        border-bottom:4px solid;border-image-slice:1;border-image-source:linear-gradient(90deg, transparent @(Model.Intensity.Progression.Min ?? 0)%, @borderColor @(Model.Intensity.Progression.Min ?? 0)% @(Model.Intensity.Progression.Max ?? 100)%, transparent @(Model.Intensity.Progression.Max ?? 100)%);">
    <div>
        <h3 style="margin-block:0;">
            <a target="_blank" href="@Model.Exercise.Instruction">
                @(Model.Intensity.Name ?? Model.Exercise.Name)
            </a>
        </h3>

        <h5 style="margin-block:1ex;">@Html.DisplayFor(m => Model.Intensity)</h5>
          
        @if (Model.EquipmentGroups.Any())
        {
            <ul style="margin-block:1ex;padding-inline-start:2ex;">
                @foreach (var equipmentGroup in Model.EquipmentGroups.OrderByDescending(eg => eg.Required))
                {
                    <li>
                        <small>@Html.DisplayFor(m => equipmentGroup)</small>
                    </li>
                }
            </ul>
        }

        @if (Model.Verbose) 
        {
            <div style="margin-block:1ex;font-size:x-small;">@Model.Muscles.GetDisplayName32()</div>
        }

        <div style="height:200px;background-size:contain;background-repeat:no-repeat;background-image:url('@Url.AbsoluteContent($"~/images/{Model.Exercise.Code}.webp")'),url('@Url.AbsoluteContent($"~/images/{Model.Exercise.Code}.jpg")');"></div>
    </div>
    
    @if (Model.User != null && (Model.HasHigherProgressionVariation || Model.HasLowerProgressionVariation))
    {
        <small style="padding-top:1ex;display:flex">
            @if (Model.HasHigherProgressionVariation)
            {
                <a href="@Url.ActionLink(nameof(UserController.ThatWorkoutWasEasy), UserController.Name, new { Model.User.Email, ExerciseId = Model.Exercise.Exercise.Id })">Too easy?</a>
            }
            @if (Model.HasLowerProgressionVariation)
            {
                <a style="margin-left:auto" href="@Url.ActionLink(nameof(UserController.ThatWorkoutWasTough), UserController.Name, new { Model.User.Email, ExerciseId = Model.Exercise.Exercise.Id })">Too hard?</a>
            }
        </small>
    }

    @if (Model.UserProgression != null) 
    {
        var progressionOutOfRange = Model.UserProgression.Progression < Model.Intensity.Progression.Min || Model.UserProgression.Progression > Model.Intensity.Progression.Max;
        <div style="position:absolute;left:calc(@Model.UserProgression.Progression% - 1ch);bottom:0;font-size:xx-small;@(progressionOutOfRange ? "color:red" : "")">
            &#128899;
        </div>
        @if (progressionOutOfRange && Model.User != null) {
            <div style="position:absolute;left:calc(@Model.User.AverageProgression% - 1ch);bottom:0;font-size:x-small;">
                &#128924;
            </div>
        }
    }
    
    @if (Model.Verbose)
    {
        if (Model.Intensity.Progression.Min.HasValue) 
        {
            <div style="position:absolute;left:@Model.Intensity.Progression.Min%;bottom:0;font-size:xx-small;">
                @Model.Intensity.Progression.Min
            </div>
        }

        if (Model.Intensity.Progression.Max.HasValue)
        {
            <div style="position:absolute;left:calc(@Model.Intensity.Progression.Max% - @(Model.Intensity.Progression.Max.Value.ToString().Length)ch);bottom:0;font-size:xx-small;">
                @Model.Intensity.Progression.Max
            </div>
        }
    }
</div>