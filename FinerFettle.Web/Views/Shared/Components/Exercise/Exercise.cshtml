@model ViewModels.Newsletter.ExerciseViewModel
@using Controllers
@using Microsoft.AspNetCore.Http.Extensions
@using Extensions
@using Models.Exercise
@using ViewModels.Newsletter

@{ 
    var borderColor = Model.ActivityLevel switch
    {
        ExerciseActivityLevel.Main => "palegreen",
        ExerciseActivityLevel.Cooldown => "lightskyblue",
        ExerciseActivityLevel.Warmup => "palevioletred",
        _ => "gray"
    };

    var backgroundColor = Model.ActivityLevel switch
    {
        ExerciseActivityLevel.Main => "rgba(200,255,200,.1)",
        ExerciseActivityLevel.Cooldown => "rgba(200,200,255,.1)",
        ExerciseActivityLevel.Warmup => "rgba(255,200,200,.1)",
        _ => "transparent"
    };

    var minUserProgression = Model.UserProgression?.Progression ?? Model.Intensity.Progression.Min;
    var maxUserProgression = (Model.UserProgression?.Progression ?? Model.Intensity.Progression.Max) + 1;
}

<div style="flex:1 0 200px;outline:1px solid @borderColor;padding:10px;display:flex;flex-direction:column;justify-content:space-between;background-color:@backgroundColor;
        border-bottom:4px solid;border-image-slice:1;border-image-source:linear-gradient(90deg, transparent @(Model.Intensity.Progression.Min ?? 0)%, @borderColor @(Model.Intensity.Progression.Min ?? 0)% @minUserProgression%, black @minUserProgression% @maxUserProgression%, @borderColor @maxUserProgression% @(Model.Intensity.Progression.Max ?? 100)%, transparent @(Model.Intensity.Progression.Max ?? 100)%);">
    <div>
        <h3 style="margin-block:0;">
            <a target="_blank" href="@Model.Exercise.Instruction">
                @(Model.Intensity.Name ?? Model.Exercise.Name)
            </a>
        </h3>

        <h5 style="margin-block:1ex;">@Html.DisplayFor(m => Model.Intensity)</h5>
          
        @if (Model.EquipmentGroups.Any())
        {
            <ul>
                @foreach (var equipmentGroup in Model.EquipmentGroups.OrderByDescending(eg => eg.Required))
                {
                    <li>
                        <small>@Html.DisplayFor(m => equipmentGroup)</small>
                    </li>
                }
            </ul>
        }

        @if (Model.Verbose) {
            <div style="display:flex">
                <div style=""></div>
                <div></div>
                <div></div>
                <div></div>
            </div>
            <small>Progression: <b>@Model.Intensity.Progression.Min - @Model.Intensity.Progression.Max</b></small>
            <br />
            <div style="font-size:x-small;">@Model.Muscles.GetDisplayName32()</div>
        }

        <div style="height:200px;background-size:contain;background-repeat:no-repeat;background-image:url('@Url.AbsoluteContent($"~/images/{Model.Exercise.Code}.webp")'),url('@Url.AbsoluteContent($"~/images/{Model.Exercise.Code}.jpg")');"></div>
    </div>
    
    @if (Model.User != null && (Model.HasHigherProgressionVariation || Model.HasLowerProgressionVariation))
    {
        <small style="padding-top:1ex;display:flex">
            @if (Model.HasHigherProgressionVariation)
            {
                <a href="@Url.ActionLink(nameof(UserController.ThatWorkoutWasEasy), UserController.Name, new { Model.User.Email, ExerciseId = Model.Exercise.Exercise.Id })">Too easy?</a>
            }
            @if (Model.HasLowerProgressionVariation)
            {
                <a style="margin-left:auto" href="@Url.ActionLink(nameof(UserController.ThatWorkoutWasTough), UserController.Name, new { Model.User.Email, ExerciseId = Model.Exercise.Exercise.Id })">Too hard?</a>
            }
        </small>
    }
</div>