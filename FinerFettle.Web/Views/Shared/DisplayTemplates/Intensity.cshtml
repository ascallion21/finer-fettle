@model IntensityPreference
@using Models.Exercise

@if (Model.Proficiency.MinReps.HasValue || Model.Proficiency.MaxReps.HasValue)
{
    void Reps() {
        @if (Model.Proficiency.MinReps == Model.Proficiency.MaxReps) 
        {
            @:@Model.Proficiency.MaxReps
        } 
        else 
        {
            @:@Html.DisplayFor(modelItem => Model.Proficiency.MinReps)-@Html.DisplayFor(modelItem => Model.Proficiency.MaxReps)
        }    
    }
    <span>@Html.DisplayFor(modelItem => Model.Proficiency.Sets) set(s) of @{Reps();} reps (each side)</span>
}
else if (Model.Proficiency.Secs.HasValue)
{
    <span>@Html.DisplayFor(modelItem => Model.Proficiency.Sets) set(s) of @Html.DisplayFor(modelItem => Model.Proficiency.Secs) second holds</span>
}

@if (Model.Proficiency.Secs != null && (Model.Proficiency.MinReps != null || Model.Proficiency.MaxReps != null))
{
    if (Model.Intensity.MuscleContractions.HasFlag(MuscleContractions.Isometric)) 
    {
        <br />
        <small>Hold the peak of each repetition for @Html.DisplayFor(modelItem => Model.Proficiency.Secs) second(s)</small>
    } 
    else 
    {
        <br />
        <small>For a harder workout, add a @Html.DisplayFor(modelItem => Model.Proficiency.Secs) second hold to the peak of each repetition</small>
    }
}