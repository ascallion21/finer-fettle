@model ViewModels.Newsletter.NewsletterViewModel
@using Models.Exercise
@using Models.Newsletter
@using Extensions
@using Controllers
@using ViewModels.Newsletter
@using ViewModels.Exercise

@{
    Layout = "_Blank";
}

<partial name="Newsletter/_Preview" model='$"{Model.Newsletter.NewsletterRotation.NewsletterType.GetSingleDisplayName()}:{Model.Newsletter.NewsletterRotation.IntensityLevel.GetSingleDisplayName()} - {Model.Newsletter.NewsletterRotation.MuscleGroups.GetSingleDisplayName()}"' />

<div style="margin-block:1rem;">
    <h6 style="margin-block:0;"><i>@DateTime.UtcNow.ToLongDateString()</i></h6>
    <h1 style="margin-block:0;">Daily Workout</h1>
    <h4 style="margin-block:0;display:inline-block;">@Model.Newsletter.NewsletterRotation.NewsletterType.GetSingleDisplayName():@Model.Newsletter.NewsletterRotation.IntensityLevel.GetSingleDisplayName()</h4>
    <small> - @Model.Newsletter.NewsletterRotation.MuscleGroups.GetSingleDisplayName() (@Model.Newsletter.NewsletterRotation.MovementPatterns.GetDisplayName32(EnumExtensions.DisplayNameType.GroupName))</small>
</div>

@if (Model.User.LastActive == null) 
{
    <div style="background-color:honeydew;padding:1rem;margin-block:1rem;">
        <div>Thank you for subscribing to receive workout emails from Finer Fettle!</div>
        <div>Please <a href="@Url.StillHereLink(Model.User.Email, Model.User.Token, null)">confirm your account</a> or interact with this email to continue receiving workouts.</div>
        <br>
        <div><small>Not you? Ignore this email or <a href="@Url.ActionLink(nameof(UserController.Delete), UserController.Name, new { Model.User.Email, Model.User.Token })">delete your account</a> to unsubscribe.</small></div>
    </div>
}
else if (Model.User.IsAlmostInactive)
{
    <div style="background-color:antiquewhite;padding:1rem;margin-block:1rem;">
        <span>Your account is at risk of being deactivated for inactivity. Please click <a href="@Url.StillHereLink(Model.User.Email, Model.User.Token, null)">here</a> to continue receiving emails.</span>
    </div>
}

<div style="margin-block:1rem;">
    <partial name="Exercise/_ExerciseSection" model='new ExerciseSectionViewModel(Model.DebugExercises, Model.Verbosity, ExerciseTheme.Extra)' />

    <partial name="Exercise/_ExerciseSection" model='@(new ExerciseSectionViewModel($"Recovery: {Model.User.RecoveryMuscle.GetSingleDisplayName()}", Model.RecoveryExercises, Model.Verbosity, ExerciseTheme.Warmup))' />

    @if (Model.User.RecoveryMuscle != MuscleGroups.None)
    {
        <div style="background-color:floralwhite;padding:1rem;margin-top:1.5rem;margin-bottom:-.5rem;">
            <span>You have a recovery muscle group set. This workout is excluding exercises that may stress your @Model.User.RecoveryMuscle.GetSingleDisplayName().</span>
        </div>
    }

    <partial name="Exercise/_ExerciseSection" model='@(new ExerciseSectionViewModel("Warmup", Model.WarmupExercises, Model.Verbosity, ExerciseTheme.Warmup) { Description = "Aim to get your heart rate up with 5-10 minutes of cardio." })' />

    @if (Model.Newsletter.IsDeloadWeek)
    {
        <div style="background-color:lightyellow;padding:1rem;margin-top:1.5rem;margin-bottom:-.5rem;">
            <span>It's time to deload for a week. Scale down the intensity of your workout by ~50%. Take this time to rest and recover. You've earned it!</span>
        </div>
    }

    @{
        var mainDesc = Model.Newsletter.IsDeloadWeek ? "Use light weights, if any. Rest for 30s or less (endurance) between sets." : "Ramp up the first few reps to your target weight. Rest for 30s-90s (hypertrophy) or 2-5 minutes (strength) between sets.";
    }
    <partial name="Exercise/_ExerciseSection" model='@(new ExerciseSectionViewModel("Workout", Model.MainExercises, Model.Verbosity, ExerciseTheme.Main) { Description = mainDesc })' />
    <partial name="Exercise/_ExerciseSection" model='@(new ExerciseSectionViewModel("Adjunct", Model.ExtraExercises, Model.Verbosity, ExerciseTheme.Extra) { Description = "Do this if you have the time/energy. Use light weights, if any." })' />

    <partial name="Exercise/_ExerciseSection" model='@(new ExerciseSectionViewModel($"Sport: {Model.User.SportsFocus.GetSingleDisplayName()}", Model.SportsExercises, Model.Verbosity, ExerciseTheme.Other))' />

    <partial name="Exercise/_ExerciseSection" model='@(new ExerciseSectionViewModel("Cooldown", Model.CooldownExercises, Model.Verbosity, ExerciseTheme.Cooldown) { Description = "Alternatively, work through a full-body Yoga or Pilates routine." })' />
</div>

<div style="background-color:lavender;padding:1rem;margin-block:1rem;">
    @await Component.InvokeAsync("Footnote", new { Count = Model.FootnoteCount })
</div>

<hr style="margin-block:1ex;">

@if (!Model.Demo)
{
    <a href="@Url.StillHereLink(Model.User.Email, Model.User.Token, Url.ActionLink(nameof(UserController.Edit), UserController.Name, new { Model.User.Email, Model.User.Token }))">Manage Preferences</a>
}

@if (Model.TimeUntilDeload.TotalDays > 0)
{
    <div><small><b>Days Until Deload</b> - @Model.TimeUntilDeload.TotalDays</small></div>
}
<div><small><b>Rest Days</b> - @Model.User.RestDays.GetSingleDisplayName()</small></div>
<div><small><b>Strengthening Preference</b> - @Model.User.StrengtheningPreference.GetSingleDisplayName()</small></div>
<div><small><b>Workout Split</b> - @Model.User.Frequency.GetSingleDisplayName()</small></div>
<div><small><b>Prefers Weights</b> - @Model.User.PrefersWeights</small></div>
<div><small><b>Show Bonus Exercises</b> - @Model.User.IncludeBonus</small></div>
<div><small><b>Sports Focus</b> - @Model.User.SportsFocus.GetSingleDisplayName()</small></div>
<div><small><b>Recovery Muscle</b> - @Model.User.RecoveryMuscle.GetSingleDisplayName()</small></div>
<div><small><b>Equipment</b> - @Html.DisplayFor(_ => Model.AllEquipment)</small></div>
<div><small><b>Ignored Exercises</b> - @String.Join(", ", Model.User.UserExercises.Where(ep => ep.Ignore).Select(ep => ep.Exercise.Name).OrderBy(n => n))</small></div>

@if (!Model.Demo)
{
    <hr style="margin-block:1ex;">
    <a href="@Url.ActionLink(nameof(UserController.Delete), UserController.Name, new { Model.User.Email, Model.User.Token })">Unsubscribe</a>

    <hr style="margin-block:1ex;">
    <a href="@Url.PageLink("/ImageAttribution")">Image Attribution</a>

    <hr style="margin-block:1ex;">
    <span>
        <a href="@Url.PageLink("/Terms")">Terms of Use</a> | <a href="@Url.PageLink("/Privacy")">Privacy</a>
    </span>

    <hr style="margin-block:1ex;">
    <span>Questions? Comments? Issues? Contact us at <a href="mailto:help@finerfettle.com">help@finerfettle.com</a></span>
} 
else 
{
    <script>
        // Navigated back to the newsletter from the 'Too easy?'/'Too hard?' links. Refresh the demo content.
        if (!!window.performance && window.performance.navigation.type === 2) {
            // Refreshing the parent so the loading icon shows up
            window.parent.location.reload();
        }
    </script>
}