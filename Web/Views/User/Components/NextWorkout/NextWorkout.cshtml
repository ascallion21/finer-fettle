@model ViewModels.User.NextWorkoutViewModel
@using Core.Models.Exercise
@using Lib.ViewModels.User
@using Lib.ViewModels.Newsletter
@using Core.Code.Extensions
@using Core.Models.User

@{
    // Match up the next 7 days with their upcoming newsletter rotation
    var dayRotations = EnumExtensions.GetSingleValues32<Days>()
        // Order days by the current day and then their weekday order.
        .OrderByDescending(day => day == Model.Today && Model.NextWorkoutSendsToday)
        .ThenBy(day => ((day - Model.Today) > 0) ? (day - Model.Today) : int.MaxValue)
        .ThenBy(day => day - Model.Today)
        .Select(day =>
        {
            if (Model.User.SendDays.HasFlag(day))
            {
                // 7 days are longer than the splits
                if (!Model.CurrentAndUpcomingRotations.MoveNext())
                {
                    Model.CurrentAndUpcomingRotations.Reset();
                    Model.CurrentAndUpcomingRotations.MoveNext();
                }

                return (day: day, rotation: Model.CurrentAndUpcomingRotations.Current.ToUserString(includeDay: false));
            } 
            else if (Model.User.IncludeMobilityWorkouts)
            {
                return (day: day, rotation: "Mobility");
            }

            return (day: day, rotation: "Rest");
        }).ToList();
}

@if (Model.TimeUntilNextSend.HasValue)
{
    <div class="alert alert-primary" role="alert">
        <div class="mb-3">
            @if (Model.TimeUntilNextSend.Value.TotalHours <= 0)
            {
                <b>Your next workout is sending.</b>
            }
            else
            {
                <b>Your next workout will send in @Model.TimeUntilNextSend.Value.TotalHours.ToString("F1") hours.</b>
            }
        </div>
        
        @for (var i = 0; i < dayRotations.Count; i++)
        {
            var (day, rotation) = dayRotations[i];
            <div style="font-size:smaller;">
                @if (i == 0)
                {
                    <i class="font-weight--semibold">@day.GetSingleDisplayName(EnumExtensions.DisplayNameType.ShortName): @rotation</i>
                }
                else
                {
                    <span>@day.GetSingleDisplayName(EnumExtensions.DisplayNameType.ShortName): @rotation</span>
                }
            </div>
        }
        <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.AdvanceSplit)" asp-route-email="@Model.User.Email" asp-route-token="@Model.Token" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <button class="btn btn-icon" type="submit" title="Advance your workout split">
                <img src="/images/user/advance.svg">
            </button>
        </form>
    </div>
}