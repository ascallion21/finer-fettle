@model ViewModels.User.NextWorkoutViewModel
@using Models.Exercise
@using Models.User
@using Models.Newsletter

@{
    // Match up the next 7 days with their upcoming newsletter rotation
    var dayRotations = EnumExtensions.GetSingleValues32<Days>()
        // Order days by the current day and then their weekday order.
        .OrderByDescending(day => day == Model.Today && Model.NextWorkoutSendsToday)
        .ThenBy(day => ((day - Model.Today) > 0) ? (day - Model.Today) : int.MaxValue)
        .ThenByDescending(day => day - Model.Today)
        .Select(day =>
        {
            if (Model.User.SendDays.HasFlag(day))
            {
                // 7 days are longer than the splits
                if (!Model.CurrentAndUpcomingRotations.MoveNext())
                {
                    Model.CurrentAndUpcomingRotations.Reset();
                    Model.CurrentAndUpcomingRotations.MoveNext();
                }

                return (day: day, rotation: Model.CurrentAndUpcomingRotations.Current.ToUserString(includeDay: false));
            } 
            else if (Model.User.OffDayStretching)
            {
                return (day: day, rotation: "Mobility");
            }

            return (day: day, rotation: "Rest");
        }).ToList();
}

@if (Model.TimeUntilNextSend.HasValue)
{
    <div class="alert alert-info" role="alert">
        @if (Model.TimeUntilNextSend.Value.TotalHours <= 0)
        {
            <div>Your next workout is sending.</div>
        }
        else
        {
            <div>Your next workout will send in @Model.TimeUntilNextSend.Value.TotalHours.ToString("F1") hours.</div>
        }

        @for (var i = 0; i < dayRotations.Count; i++)
        {
            var (day, rotation) = dayRotations[i];
            <br>
            if (i == 0)
            {
                <b>@day.GetSingleDisplayName(EnumExtensions.DisplayNameType.ShortName): @rotation</b>
            }
            else
            {
                <span>@day.GetSingleDisplayName(EnumExtensions.DisplayNameType.ShortName): @rotation</span>
            }
        }
        <br />
        <span>...</span>
        <hr>
        <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.AdvanceSplit)" asp-route-email="@Model.User.Email" asp-route-token="@Model.Token" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="submit" value="Advance Workout Split" class="btn btn-outline-secondary" />
        </form>
    </div>
}