@model NextWorkoutViewModel
@using Core.Models.Exercise
@using Lib.ViewModels.User
@using Lib.ViewModels.Newsletter
@using Core.Models.User

@if (Model.TimeUntilNextSend.HasValue)
{
    // Match up the next 7 days with their upcoming newsletter rotation
    var dayRotations = EnumExtensions.GetSingleValues32<Days>()
        // Order days by the current day and then their weekday order.
        .OrderByDescending(day => day == Model.Today && Model.NextWorkoutSendsToday)
        .ThenBy(day => ((day - Model.Today) > 0) ? (day - Model.Today) : int.MaxValue)
        .ThenBy(day => day - Model.Today)
        .Select(day =>
        {
            if (Model.User.SendDays.HasFlag(day))
            {
                // 7 days are longer than the splits
                if (!Model.CurrentAndUpcomingRotations.MoveNext())
                {
                    Model.CurrentAndUpcomingRotations.Reset();
                    Model.CurrentAndUpcomingRotations.MoveNext();
                }

                return (day: day, rotation: Model.CurrentAndUpcomingRotations.Current, frequency: Model.User.Frequency);
            } 
            else if (Model.User.IncludeMobilityWorkouts)
            {
                return (day: day, rotation: Model.MobilityRotation, frequency: Frequency.OffDayStretches);
            }

            return (day: day, rotation: (Data.Entities.Newsletter.WorkoutRotation?)null, frequency: (Frequency?)null);
        }).ToList();

    <div class="row align-items-center">
        <div class="col">
            <h5 class="mb-0">Upcoming Workouts</h5>
            <h6 class="mb-1 font-weight--normal">
                @if (Model.TimeUntilNextSend.Value.TotalHours <= 0)
                {
                    <span>Your next workout is sending</span>
                }
                else
                {
                    <span>Your next workout will send in @Model.TimeUntilNextSend.Value.TotalHours.ToString("F1") hours</span>
                }
            </h6>
        </div>
        <div class="col-auto">
            <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.AdvanceSplit)" asp-route-email="@Model.User.Email" asp-route-token="@Model.Token" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <button class="btn btn-icon" type="submit" title="Advance your workout split">
                    <img src="/images/user/advance.svg">
                </button>
            </form>
        </div>
    </div>
    <ol class="list-group list-group-numbered mb-3">
        @for (var i = 0; i < dayRotations.Count; i++)
        {
            var (day, rotation, frequency) = dayRotations[i];
            <li class="list-group-item list-group-item-primary @(i == 0 ? "active" : "")">
                <div class="row ms-3 gx-3 gy-1">
                    <div class="col"><b class="">@(frequency == Frequency.OffDayStretches ? "Mobility" : (rotation?.MuscleGroups.GetDisplayName322(EnumExtensions.DisplayNameType.ShortName) ?? "Rest"))</b></div>
                    <div class="col-auto"><small class="badge bg-dark rounded-pill">@day.GetSingleDisplayName(EnumExtensions.DisplayNameType.Name)</small></div>
                </div>
                @if (rotation != null)
                {
                    <div class="ms-4">
                        @if (frequency == Frequency.OffDayStretches)
                        {
                            <small>@rotation.MuscleGroups.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>
                        }
                        else
                        {
                            <small>@rotation.MovementPatterns.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>
                        }
                    </div>
                }
            </li>
        }
    </ol>
}