@model UserManageVariationViewModel
@using System.Numerics
@using Core.Models.Exercise
@using Lib.ViewModels.User
@using Lib.ViewModels.Newsletter

@{
    ViewData[ViewData_Blank.Title] = Model.VariationName;
}

<div class="row gy-2 mb-2 mt-1 justify-content-between align-items-end">
    <div class="col-auto mb-3">
        <h1 class="primary-heading">Manage Exercise Variation</h1>
    </div>
    <div class="col-lg-6 m-0--empty">@if (Model.WasUpdated == false)
        {
            <div class="alert alert-danger alert-dismissible mb-1" role="alert">
                <span>Something went wrong.</span>
                <button type="button" class="btn-close" data-dismiss=".alert" aria-label="Close"></button>
            </div>
        }
        else if (Model.WasUpdated == true)
        {
            <div class="alert alert-success alert-dismissible mb-1" role="alert">
                <span>Your preferences have been saved. Changes will be reflected in the next workout.</span>
                <button type="button" class="btn-close" data-dismiss=".alert" aria-label="Close"></button>
            </div>
        }</div>
</div>

<div class="alert alert-secondary">
    <div class="row gy-2">
        <div class="col-lg-6">
            <h6 class="mb-1">Variation</h6>
            <div class="alert alert-light shadow">
                <form asp-controller="@UserController.Name" class="row" asp-action="@nameof(UserController.IgnoreVariation)" method="post"
                        asp-route-email="@Model.Email" asp-route-token="@Model.Token" asp-route-section="@Model.Section" asp-route-variationId="@Model.VariationId">
                            
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    <div class="form-group mb-3">
                        <label for="variation-name" class="control-label">@Html.DisplayNameFor(_ => Model.Variation)</label>
                        <div class="input-group">
                            <textarea id="variation-name" class="form-control" disabled="disabled" aria-describedby="variation-help" rows="1">@Model.Variation.Name</textarea>
                            <input type="submit" value="@(Model.UserVariation.Ignore ? "Ignored" : "Ignore")" class="btn btn-outline-secondary" />
                        </div>

                        <span asp-validation-for="Variation" class="text-danger"></span>
                        <div id="variation-help" class="form-text">
                            @Html.DisplayDescriptionFor(_ => Model.Variation)
                        </div>
                    </div>
                </form>

                <form asp-controller="@UserController.Name" class="row" asp-action="@nameof(UserController.RefreshVariation)" method="post"
                        asp-route-email="@Model.Email" asp-route-token="@Model.Token" asp-route-section="@Model.Section" asp-route-variationId="@Model.VariationId">
                            
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    <div class="form-group mb-3">
                        <label for="exercise-variation-date" class="control-label">@Html.DisplayNameFor(_ => Model.UserVariation)</label>
                        <div class="input-group">
                            <textarea id="exercise-variation-date" class="form-control" disabled="disabled" aria-describedby="exercise-variation-date-help" rows="1">@(Model.UserVariation.RefreshAfter ?? Model.UserVariation.LastSeen)</textarea>
                            <input type="submit" value="Refresh" class="btn btn-outline-secondary" />
                        </div>

                        <span asp-validation-for="UserVariation" class="text-danger"></span>
                        <div id="exercise-variation-date-help" class="form-text">
                            @Html.DisplayDescriptionFor(_ => Model.UserVariation)
                        </div>
                    </div>
                </form>

                <div class="form-group mb-3">
                    <label for="disabled-type" class="control-label">@Html.DisplayNameFor(_ => Model.Section)</label>
                    <input id="disabled-type" value="@Model.UserVariation.Section.GetSingleDisplayName(EnumExtensions.DisplayNameType.ShortName)" class="form-control" disabled="disabled" />
                    <span asp-validation-for="Section" class="text-danger"></span>
                </div>

                <component type="typeof(Lib.Pages.Shared.Exercise._ExerciseSection)" render-mode="Static" param-Exercises='Model.Variations' param-Theme='ExerciseTheme.Main' param-Verbosity="Verbosity.Quiet" />

                @if (Model.Variation.IsWeighted)
                {
                    <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.LogVariation)" method="post"
                          asp-route-email="@Model.Email" asp-route-token="@Model.Token" asp-route-section="@Model.Section" asp-route-variationId="@Model.VariationId"
                          style="min-height:21ch;">

                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        <div class="form-group mb-3 mt-3">
                            <label class="control-label">@Html.DisplayNameFor(_ => Model.Weight)</label>
                            <div><span asp-validation-for="Weight" class="text-danger"></span></div>
                            <div style="display:flex;column-gap:1ex;">
                                <input type="number" asp-for="Weight" style="width:6ch;height:fit-content;"
                                       oninput="poundsInput.value = this.valueAsNumber" />
                                <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                                    <input type="range" style="width:100%;"
                                           name="poundsInput" list="hashmarks" id="pounds-input"
                                           min="0" max="100" step="5" value="@Model.Weight"
                                           oninput="@(Html.NameFor(_ => Model.Weight)).value = this.valueAsNumber" />

                                    <datalist id="hashmarks" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                                        <option value="15"></option>
                                        <option value="30"></option>
                                        <option value="50"></option>
                                        <option value="75"></option>
                                        <option value="100"></option>

                                        <!-- These need to be separate from the <option> elements because those have their position attribute overriden (from absolute to static) on Firefox -->
                                        <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="15" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(15% - .5ch)">Extra Light Band</div>
                                        <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="30" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(30% - .5ch)">Light Band</div>
                                        <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="50" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(50% - .5ch)">Midweight Band</div>
                                        <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="75" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(75% - .5ch)">Heavy Band</div>
                                        <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="100" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;right:-2.5ch">Extra Heavy Band</div>
                                    </datalist>
                                </div>
                            </div>
                            <div id="pounds-help" class="form-text"></div>
                        </div>
                        <div class="form-group">
                            <input type="submit" value="Save" class="btn btn-primary" />
                        </div>
                    </form>

                    <div style="height:min(70vw, 300px)">
                        <canvas id="myChart"></canvas>
                    </div>
                }
            </div>
        </div>

        <div class="col-lg-6">
            <h6 class="mb-1">Exercise</h6>
            <div class="alert alert-light shadow">
                <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.IgnoreExercise)" method="post"
                      asp-route-email="@Model.Email" asp-route-token="@Model.Token" asp-route-section="@Model.Section" asp-route-variationId="@Model.VariationId">
                    
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    <div class="form-group mb-3">
                        <label for="exercise-name" class="control-label">@Html.DisplayNameFor(_ => Model.Exercise)</label>
                        <div class="input-group">
                            <textarea id="exercise-name" class="form-control" disabled="disabled" aria-describedby="exercise-help" rows="1">@Model.Exercise.Name</textarea>
                            <input type="submit" value="@(Model.UserExercise.Ignore ? "Ignored" : "Ignore")" class="btn btn-outline-secondary" />
                        </div>
                        <span asp-validation-for="Exercise" class="text-danger"></span>
                        <div id="exercise-help" class="form-text">
                            @Html.DisplayDescriptionFor(_ => Model.Exercise)
                        </div>
                    </div>
                </form>

                <form asp-controller="@UserController.Name" class="row" asp-action="@nameof(UserController.RefreshExercise)" method="post"
                      asp-route-email="@Model.Email" asp-route-token="@Model.Token" asp-route-section="@Model.Section" asp-route-variationId="@Model.VariationId">
                    
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    <div class="form-group">
                        <label for="exercise-date" class="control-label">@Html.DisplayNameFor(_ => Model.UserExercise)</label>
                        <div class="input-group">
                            <textarea id="exercise-date" class="form-control" disabled="disabled" aria-describedby="exercise-date-help" rows="1">@(Model.UserExercise.RefreshAfter ?? Model.UserExercise.LastSeen)</textarea>
                            <input type="submit" value="Refresh" class="btn btn-outline-secondary" />
                        </div>

                        <span asp-validation-for="UserExercise" class="text-danger"></span>
                        <div id="exercise-date-help" class="form-text">
                            @Html.DisplayDescriptionFor(_ => Model.UserExercise)
                        </div>
                    </div>
                </form>

                <component type="typeof(Lib.Pages.Shared.Exercise._ExerciseSection)" render-mode="Static" param-Exercises='Model.Exercises' param-Theme='ExerciseTheme.Main' param-Verbosity="Verbosity.Quiet" />
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    <script>
        // Navigated back to the newsletter from the 'Too easy?'/'Too hard?' links. Refresh the demo content.
        if (!!window.performance && window.performance.navigation.type === 2) {
            // Go back to previous webpage
            window.history.back();
            // Go-back failed
            window.close();
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script>
        if (document.getElementById('myChart')) {
            Chart.defaults.font.size = 16;
            new Chart(document.getElementById('myChart'), {
                type: 'line',
                data: {
                    datasets: [{
                        label: 'Weight',
                        data: @Json.Serialize(Model.Xys),
                        fill: false,
                        spanGaps: true,
                        showLine: true,
                        stepped: 'before',
                    }],
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    elements: {
                        point: {
                            // Increase the radius around the point when the tooltip shows
                            hitRadius: 5,
                            // Increase the size of the point when the user is withing the bounds of the hitRadius
                            hoverRadius: 5,
                        },
                    },
                    scales: {
                        y: {
                            type: 'linear',
                            beginAtZero: false,
                            // How much blank space to add in above and below y-axis data?
                            grace: '5%',
                            title: {
                                // Display a label for the y-axis
                                display: false,
                                text: 'Weight',
                            },
                            ticks: {
                                // No decimal places
                                precision: 0,
                            },
                        },
                        // https://www.chartjs.org/docs/next/axes/cartesian/time.html
                        x: {
                            type: 'time',
                            time: {
                                minUnit: 'day',
                            },
                            ticks: {
                                major: {
                                    // Allow displaying June 1st as just June
                                    enabled: true,
                                },
                                font: (context) => {
                                    // Bold major data points (June is bolded, June 11th is not)
                                    return { weight: (context.tick && context.tick.major) ? 'bold' : '' };
                                }
                            },
                        },
                    },
                    plugins: {
                        legend: {
                            // Don't show the graph legend
                            display: false,
                        },
                        tooltip: {
                            callbacks: {
                                title: (context) => {
                                    // Pretty-print the x-axis date in the hover tooltip
                                    return context.map(c => new Date(c.parsed.x).toDateString());
                                },
                            },
                        },
                        /*
                        decimation: {
                            enabled: true,
                            algorithm: 'lttb',
                            samples: 12,
                        },
                        decimation: {
                            enabled: true,
                            algorithm: 'min-max',
                        },
                        */
                    },
                }
            });
        }
    </script>
}
