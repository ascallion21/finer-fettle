@model UserEditViewModel
@using System.Numerics
@using Web.Models.Exercise
@using Web.Models.User
@using Web.Models.Newsletter

@{
    ViewData[BlankKeys.Title] = "Preferences";
}

<h1>Manage Preferences</h1>

<hr />

<div class="row gap-3">
    <div class="col-lg-5">
        @if (Model.Disabled) 
        {
            <div class="alert alert-warning" role="alert">
                <span>Your account is disabled.</span>
            </div>
        }
        else if (Model.WasUpdated == false)
        {
            <div class="alert alert-danger alert-dismissible" role="alert">
                <span>Something went wrong.</span>
                <button type="button" class="btn-close" data-dismiss=".alert" aria-label="Close"></button>
            </div>
        }
        else if (Model.WasUpdated == true) 
        {
            <div class="alert alert-success alert-dismissible" role="alert">
                <span>Your preferences have been saved. Changes will be reflected in the next email.</span>
                <button type="button" class="btn-close" data-dismiss=".alert" aria-label="Close"></button>
            </div>
        }

        <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.Edit)" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Token" />
            <input type="hidden" asp-for="Email" />
            <div class="form-group mb-3">
                <label for="disabled-email" class="control-label">@Html.DisplayNameFor(_ => Model.Email)</label>
                <input id="disabled-email" value="@Model.Email" class="form-control" disabled="disabled" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            
            <div class="form-group mb-3">
                <label asp-for="Frequency" class="control-label">@Html.DisplayNameFor(m => m.Frequency)</label>
                <select asp-for="Frequency" class="form-control" aria-describedby="frequency-help"
                        asp-items="@(Html.GetEnumSelectList<Frequency>()).OrderBy(f => f.Text)">
                </select>
                <span asp-validation-for="Frequency" class="text-danger"></span>
                <details id="frequency-help" class="form-text">
                    <summary>What's this?</summary>

                    <div>
                        <b>@Frequency.FullBody2Day.GetSingleDisplayName()</b>
                        <div class="ps-3">@Html.Raw(String.Join("<br/>", new NewsletterTypeGroups(Frequency.FullBody2Day).Select(r => r.ToUserString())))</div>
                    </div>
                    <div>
                        <b>@Frequency.PushPullLeg3Day.GetSingleDisplayName()</b>
                        <div class="ps-3">@Html.Raw(String.Join("<br/>", new NewsletterTypeGroups(Frequency.PushPullLeg3Day).Select(r => r.ToUserString())))</div>
                    </div>
                    <div>
                        <b>@Frequency.UpperLowerBodySplit4Day.GetSingleDisplayName()</b>
                        <div class="ps-3">@Html.Raw(String.Join("<br/>", new NewsletterTypeGroups(Frequency.UpperLowerBodySplit4Day).Select(r => r.ToUserString())))</div>
                    </div>

                    <div class="pt-2">@Html.DisplayDescriptionFor(m => m.Frequency)</div>
                </details>
            </div>
            @if (Model.IsNewToFitness)
            {
                <input type="hidden" asp-for="IncludeAdjunct" />
                <input type="hidden" asp-for="StrengtheningPreference" />
                <div class="form-group form-check mb-3">
                    <label asp-for="IsNewToFitness" class="control-label">@Html.DisplayNameFor(m => m.IsNewToFitness)</label>
                    <input class="form-check-input" asp-for="IsNewToFitness" aria-describedby="is-new-help" />
                    <span asp-validation-for="IsNewToFitness" class="text-danger"></span>
                    <div id="is-new-help" class="form-text">
                        <div>@Html.DisplayDescriptionFor(m => m.IsNewToFitness)</div>

                        <div class="pt-2"><i>Certain preferences are hidden while this is active. This cannot be re-toggled after being switched off.</i></div>
                    </div>
                </div>
            }
            else
            {
                <input type="hidden" asp-for="IsNewToFitness" />
                <div class="form-group mb-3">
                    <label asp-for="StrengtheningPreference" class="control-label">@Html.DisplayNameFor(m => m.StrengtheningPreference)</label>
                    <select asp-for="StrengtheningPreference" class="form-control" aria-describedby="strength-help"
                        asp-items="@(Html.GetEnumSelectList<StrengtheningPreference>())">
                    </select>
                    <span asp-validation-for="StrengtheningPreference" class="text-danger"></span>
                    <details id="strength-help" class="form-text">
                        <summary>What's this?</summary>

                        <div><b>@StrengtheningPreference.Light.GetSingleDisplayName()</b> - @StrengtheningPreference.Light.GetSingleDisplayName(EnumExtensions.DisplayNameType.Description)</div>
                        <div><b>@StrengtheningPreference.Medium.GetSingleDisplayName()</b> - @StrengtheningPreference.Medium.GetSingleDisplayName(EnumExtensions.DisplayNameType.Description)</div>
                        <div><b>@StrengtheningPreference.Heavy.GetSingleDisplayName()</b> - @StrengtheningPreference.Heavy.GetSingleDisplayName(EnumExtensions.DisplayNameType.Description)</div>

                        <div class="pt-2">@Html.DisplayDescriptionFor(m => m.StrengtheningPreference)</div>
                    </details>
                </div>
                <div class="form-group form-check mb-3">
                    <label asp-for="IncludeAdjunct" class="control-label">@Html.DisplayNameFor(m => m.IncludeAdjunct)</label>
                    <input class="form-check-input" asp-for="IncludeAdjunct" aria-describedby="adjunct-help"/>
                    <span asp-validation-for="IncludeAdjunct" class="text-danger"></span>
                    <div id="adjunct-help" class="form-text">@Html.DisplayDescriptionFor(m => m.IncludeAdjunct)</div>
                </div>
            }
            <div class="form-group mb-3">
                <label asp-for="EquipmentBinder" class="control-label">@Html.DisplayNameFor(m => m.Equipment)</label>
                <select asp-for="EquipmentBinder" class="form-control" aria-describedby="equipment-help"
                        asp-items="@(Model.Equipment.Select(v => new SelectListItem { Text = v.Name, Value = v.Id.ToString() }))">
                </select>
                <span asp-validation-for="EquipmentBinder" class="text-danger"></span>
                <div id="equipment-help" class="form-text">@Html.DisplayDescriptionFor(m => m.Equipment)</div>
            </div>
            <div class="form-group mb-3">
                <label asp-for="SportsFocus" class="control-label">@Html.DisplayNameFor(m => m.SportsFocus)</label>
                <select asp-for="SportsFocus" class="form-control" aria-describedby="sports-help"
                        asp-items='@(Enum.GetValues<SportsFocus>().AsSelectListItems32()).OrderBy(f => f.Text)'>
                </select>
                <span asp-validation-for="SportsFocus" class="text-danger"></span>
                <div id="sports-help" class="form-text">@Html.DisplayDescriptionFor(m => m.SportsFocus)</div>
            </div>
            <div class="form-group mb-3">
                <label asp-for="RecoveryMuscle" class="control-label">@Html.DisplayNameFor(m => m.RecoveryMuscle)</label>
                <select asp-for="RecoveryMuscle" class="form-control" aria-describedby="recovery-help"
                        asp-items='@(EnumExtensions.GetSingleOrNoneValues32<MuscleGroups>().AsSelectListItems32()).OrderBy(f => f.Text)'>
                </select>
                <span asp-validation-for="RecoveryMuscle" class="text-danger"></span>
                <details id="recovery-help" class="form-text">
                    <summary>Recovering a specific muscle group from injury?</summary>

                    <span>This will lower your progression of every exercise that impacts that muscle, and will optimize your workout to build back up it's strength without straining it.</span>
                </details>
            </div>
            <div class="form-group mb-3">
                <label asp-for="RefreshFunctionalEveryXWeeks" class="control-label">@Html.DisplayNameFor(m => m.RefreshFunctionalEveryXWeeks)</label>
                <div style="display:flex;column-gap:1ex;">
                    <output style="width:2ch;" name="refreshFunctionalOutput" for="@Html.IdFor(_ => Model.RefreshFunctionalEveryXWeeks)">@Model.RefreshFunctionalEveryXWeeks</output>
                    <div style="display:flex;width:100%;">
                        <input asp-for="RefreshFunctionalEveryXWeeks" type="range" style="width:100%;" aria-describedby="refresh-functional-help"
                               min="@Entities.User.User.RefreshFunctionalEveryXWeeksMin" max="@Entities.User.User.RefreshFunctionalEveryXWeeksMax"
                               oninput="refreshFunctionalOutput.value = this.valueAsNumber" />
                    </div>
                </div>
                <span asp-validation-for="RefreshFunctionalEveryXWeeks" class="text-danger"></span>
                <div id="refresh-functional-help" class="form-text">
                    @Html.DisplayDescriptionFor(_ => Model.RefreshFunctionalEveryXWeeks)
                </div>
            </div>
            <div class="form-group mb-3">
                <label asp-for="RefreshAccessoryEveryXWeeks" class="control-label">@Html.DisplayNameFor(m => m.RefreshAccessoryEveryXWeeks)</label>
                <div style="display:flex;column-gap:1ex;">
                    <output style="width:2ch;" name="refreshAccessoryOutput" for="@Html.IdFor(_ => Model.RefreshAccessoryEveryXWeeks)">@Model.RefreshAccessoryEveryXWeeks</output>
                    <div style="display:flex;width:100%;">
                        <input asp-for="RefreshAccessoryEveryXWeeks" type="range" style="width:100%;" aria-describedby="refresh-accessory-help"
                               min="@Entities.User.User.RefreshAccessoryEveryXWeeksMin" max="@Entities.User.User.RefreshAccessoryEveryXWeeksMax"
                               oninput="refreshAccessoryOutput.value = this.valueAsNumber" />
                    </div>
                </div>
                <span asp-validation-for="RefreshAccessoryEveryXWeeks" class="text-danger"></span>
                <div id="refresh-accessory-help" class="form-text">
                    @Html.DisplayDescriptionFor(_ => Model.RefreshAccessoryEveryXWeeks)
                </div>
            </div>
            <div class="form-group mb-3">
                <label asp-for="DeloadAfterEveryXWeeks" class="control-label">@Html.DisplayNameFor(m => m.DeloadAfterEveryXWeeks)</label>
                <div style="display:flex;column-gap:1ex;">
                    <output style="width:2ch;" name="deloadOutput" for="@Html.IdFor(_ => Model.DeloadAfterEveryXWeeks)">@Model.DeloadAfterEveryXWeeks</output>
                    <div style="display:flex;width:100%;">
                        <input asp-for="DeloadAfterEveryXWeeks" type="range" style="width:100%;" aria-describedby="deload-help"
                               min="@Entities.User.User.DeloadAfterEveryXWeeksMin" max="@Entities.User.User.DeloadAfterEveryXWeeksMax"
                               oninput="deloadOutput.value = this.valueAsNumber" />
                    </div>
                </div>
                <span asp-validation-for="DeloadAfterEveryXWeeks" class="text-danger"></span>
                <details id="deload-help" class="form-text">
                    <summary>@Html.DisplayDescriptionFor(_ => Model.DeloadAfterEveryXWeeks)</summary>

                    <i>Deload weeks are crucial for mitigating fatigue injuries, allowing joints to recover from repeated stress, and preventing muscle growth stagnation. Heavy lifters should deload more often than others.</i>
                </details>
            </div>
            <div class="form-group mb-3">
                <label asp-for="EmailVerbosity" class="control-label">@Html.DisplayNameFor(m => m.EmailVerbosity)</label>
                <select asp-for="EmailVerbosity" class="form-control" aria-describedby="verbosity-help"
                        asp-items="@(EnumExtensions.GetDisplayValues<Verbosity>().AsSelectListItems32())">
                </select>
                <span asp-validation-for="EmailVerbosity" class="text-danger"></span>
                <div id="verbosity-help" class="form-text">@Html.DisplayDescriptionFor(m => m.EmailVerbosity)</div>
            </div>
            <div class="form-group mb-3">
                <label asp-for="SendDaysBinder" class="control-label">@Html.DisplayNameFor(m => m.SendDays)</label>
                <select asp-for="SendDaysBinder" class="form-control" aria-describedby="rest-help"
                        asp-items="@(EnumExtensions.GetSingleValues32<RestDays>().AsSelectListItems32())">
                </select>
                <span asp-validation-for="SendDaysBinder" class="text-danger"></span>
                <div id="rest-help" class="form-text">@Html.DisplayDescriptionFor(m => m.SendDays)</div>
            </div>
            <div class="form-group mb-3">
                <label asp-for="EmailAtUTCOffset" class="control-label">@Html.DisplayNameFor(m => m.EmailAtUTCOffset)</label>
                <select asp-for="EmailAtUTCOffset" class="form-control" aria-describedby="time-help"
                        asp-items="@(Enumerable.Range(0, 24).Select(h => new SelectListItem() { Text = $"{h}", Value = $"{h}" }))">
                </select>
                <span asp-validation-for="EmailAtUTCOffset" class="text-danger"></span>
                <div id="time-help" class="form-text">@Html.DisplayDescriptionFor(m => m.EmailAtUTCOffset)</div>
            </div>
            <div class="form-group form-check mb-3">
                <label asp-for="PreferStaticImages" class="control-label">@Html.DisplayNameFor(m => m.PreferStaticImages)</label>
                <input class="form-check-input" asp-for="PreferStaticImages" aria-describedby="prefer-static-help" />
                <span asp-validation-for="PreferStaticImages" class="text-danger"></span>
                <div id="prefer-static-help" class="form-text">@Html.DisplayDescriptionFor(m => m.PreferStaticImages)</div>
            </div>
            @if (Model.IgnoredExercises != null && Model.IgnoredExercises.Any())
            {
                <div class="form-group mb-3">
                    <label asp-for="IgnoredExerciseBinder" class="control-label">@Html.DisplayNameFor(m => m.IgnoredExercises)</label>
                    <select asp-for="IgnoredExerciseBinder" class="form-control" aria-describedby="exercise-help"
                        asp-items="@(Model.IgnoredExercises.Select(v => new SelectListItem { Text = v.Name, Value = v.Id.ToString() }))">
                    </select>
                    <span asp-validation-for="IgnoredExerciseBinder" class="text-danger"></span>
                    <div id="exercise-help" class="form-text">@Html.DisplayDescriptionFor(m => m.IgnoredExercises)</div>
                </div>
            }
            @if (Model.IgnoredVariations != null && Model.IgnoredVariations.Any())
            {
                <div class="form-group mb-3">
                    <label asp-for="IgnoredVariationBinder" class="control-label">@Html.DisplayNameFor(m => m.IgnoredVariations)</label>
                    <select asp-for="IgnoredVariationBinder" class="form-control" aria-describedby="variation-help"
                        asp-items="@(Model.IgnoredVariations.Select(v => new SelectListItem { Text = v.Name, Value = v.Id.ToString() }))">
                    </select>
                    <span asp-validation-for="IgnoredVariationBinder" class="text-danger"></span>
                    <div id="variation-help" class="form-text">@Html.DisplayDescriptionFor(m => m.IgnoredVariations)</div>
                </div>
            }
            <div class="form-group form-check mb-3">
                <label asp-for="Disabled" class="control-label">@Html.DisplayNameFor(m => m.Disabled)</label>
                <input class="form-check-input" asp-for="Disabled" aria-describedby="disabled-help" />
                <span asp-validation-for="Disabled" class="text-danger"></span>
                <div id="disabled-help" class="form-text">
                    @Html.DisplayDescriptionFor(m => m.Disabled)
                    @if (!String.IsNullOrEmpty(Model.DisabledReason))
                    {
                        <div><b>Reason</b> - @Model.DisabledReason</div>
                    }
                </div>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>

    <div class="col">
        @await Component.InvokeAsync(NextWorkoutViewComponent.Name, new { Model.User })
        @await Component.InvokeAsync(DeloadViewComponent.Name, new { Model.User })
        @await Component.InvokeAsync(WorkoutsPerWeekViewComponent.Name, new { Model.User })
        @await Component.InvokeAsync(MonthlyMusclesViewComponent.Name, new { Model.User })

        @if (Model.TheIgnoredExercises.Any())
        {
            <details class="mb-3">
                <summary><h3 class="d-inline-flex">Ignored Exercises</h3></summary>

                <partial name="Exercise/_ExerciseSection" model='new ExerciseSectionViewModel(Model.TheIgnoredExercises, Verbosity.Quiet, ExerciseTheme.Main)' />
            </details>
        }
        
        @if (Model.TheIgnoredVariations.Any())
        {
            <details class="mb-3">
                <summary><h3 class="d-inline-flex">Ignored Variations</h3></summary>

                <partial name="Exercise/_ExerciseSection" model='new ExerciseSectionViewModel(Model.TheIgnoredVariations, Verbosity.Quiet, ExerciseTheme.Main)' />
            </details>
        }
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
