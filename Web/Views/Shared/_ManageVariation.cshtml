@model UserManageVariationViewModel
@using System.Numerics
@using Core.Models.Exercise
@using Lib.ViewModels.User
@using Lib.ViewModels.Newsletter
@using Core.Consts

<h6 class="mb-1">Variation</h6>
<div class="alert alert-light shadow">
    <form asp-controller="@UserController.Name" class="row" asp-action="@nameof(UserController.IgnoreVariation)" method="post"
          asp-route-email="@Model.Parameters.Email" asp-route-token="@Model.Parameters.Token" asp-route-section="@Model.Parameters.Section" asp-route-variationId="@Model.Parameters.VariationId" asp-route-exerciseId="@Model.Parameters.ExerciseId">

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group mb-3">
            <label for="variation-name" class="control-label">@Html.DisplayNameFor(_ => Model.Variation)</label>
            <div class="input-group">
                <textarea id="variation-name" class="form-control" disabled="disabled" aria-describedby="variation-help" rows="1">@Model.Variation.Name</textarea>
                <input type="submit" value="@(Model.UserVariation.Ignore ? "Ignored" : "Ignore")" class="btn btn-outline-secondary" @(Model.User.IsDemoUser ? "disabled='disabled'" : "") />
            </div>

            <span asp-validation-for="Variation" class="text-danger"></span>
            <div id="variation-help" class="form-text">
                @Html.DisplayDescriptionFor(_ => Model.Variation)
            </div>
        </div>
    </form>

    <div class="form-group mb-3">
        <label for="disabled-type" class="control-label">@Html.DisplayNameFor(_ => Model.VariationSection)</label>
        <input id="disabled-type" value="@Model.UserVariation.Section.GetSingleDisplayName(EnumExtensions.DisplayNameType.ShortName)" class="form-control" disabled="disabled" />
        <span asp-validation-for="VariationSection" class="text-danger"></span>
    </div>

    <component type="typeof(Lib.Pages.Shared.Exercise.ExerciseSection)" render-mode="Static" param-User="null" param-Exercises='Model.Variations' param-Theme='Model.VariationSection.AsTheme()' param-Verbosity="Model.VariationVerbosity" />

    @if (Model.Variation.IsWeighted)
    {
        @if (Model.User.IsDemoUser)
        {
            <div class="alert alert-info callout mt-3">
                Track how much weight you are able to lift.
            </div>
        }

        <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.LogVariation)" method="post"
              asp-route-email="@Model.Parameters.Email" asp-route-token="@Model.Parameters.Token" asp-route-section="@Model.Parameters.Section" asp-route-variationId="@Model.Parameters.VariationId" asp-route-exerciseId="@Model.Parameters.ExerciseId"
              style="min-height:36ch;">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>


            <div class="form-group mb-3 mt-3">
                <label class="control-label">@Html.DisplayNameFor(_ => Model.Sets)</label>
                <div><span asp-validation-for="Sets" class="text-danger"></span></div>
                <div style="display:flex;column-gap:1ex;">
                    <input type="number" asp-for="Sets" style="width:6ch;height:fit-content;" class="allow-demo"
                           oninput="setsInput.value = this.valueAsNumber" />
                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                        <input type="range" style="width:100%;" class="allow-demo"
                               name="setsInput" list="hashmarks" id="sets-input"
                               min="0" max="6" step="1" value="@Model.Sets"
                               oninput="@(Html.NameFor(_ => Model.Sets)).value = this.valueAsNumber" />
                    </div>
                </div>
                <div id="sets-help" class="form-text"></div>
            </div>


            <div class="form-group mb-3 mt-3">
                <label class="control-label">@Html.DisplayNameFor(_ => Model.Reps)</label>
                <div><span asp-validation-for="Reps" class="text-danger"></span></div>
                <div style="display:flex;column-gap:1ex;">
                    <input type="number" asp-for="Reps" style="width:6ch;height:fit-content;" class="allow-demo"
                           oninput="repsInput.value = this.valueAsNumber" />
                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                        <input type="range" style="width:100%;" class="allow-demo"
                               name="repsInput" list="hashmarks" id="reps-input"
                               min="0" max="30" step="1" value="@Model.Reps"
                               oninput="@(Html.NameFor(_ => Model.Reps)).value = this.valueAsNumber" />
                    </div>
                </div>
                <div id="reps-help" class="form-text"></div>
            </div>

            <div class="form-group mb-3 mt-3">
                <label class="control-label">@Html.DisplayNameFor(_ => Model.Weight)</label>
                <div><span asp-validation-for="Weight" class="text-danger"></span></div>
                <div style="display:flex;column-gap:1ex;">
                    <input type="number" asp-for="Weight" style="width:6ch;height:fit-content;" class="allow-demo"
                           oninput="poundsInput.value = this.valueAsNumber" />
                    <div style="width:100%;display:flex;flex-direction:column;justify-content:center;">
                        <input type="range" style="width:100%;" class="allow-demo"
                               name="poundsInput" list="hashmarks" id="pounds-input"
                               min="0" max="100" step="5" value="@Model.Weight"
                               oninput="@(Html.NameFor(_ => Model.Weight)).value = this.valueAsNumber" />

                        <datalist id="hashmarks" style="display:flex;flex-direction:column;writing-mode:vertical-lr;width:calc(100% - 2ch);position:relative;">
                            <option value="15"></option>
                            <option value="30"></option>
                            <option value="50"></option>
                            <option value="75"></option>
                            <option value="100"></option>

                            <!-- These need to be separate from the <option> elements because those have their position attribute overridden (from absolute to static) on Firefox -->
                            <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="15" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(15% - .5ch)">Extra Light Band</div>
                            <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="30" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(30% - .5ch)">Light Band</div>
                            <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="50" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(50% - .5ch)">Midweight Band</div>
                            <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="75" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;left:calc(75% - .5ch)">Heavy Band</div>
                            <div onclick="@(Html.NameFor(_ => Model.Weight)).value = document.getElementById('pounds-input').value = this.dataset.value" data-value="100" style="white-space:nowrap;text-decoration:underline;cursor:pointer;position:absolute;right:-2.5ch">Extra Heavy Band</div>
                        </datalist>
                    </div>
                </div>
                <div id="pounds-help" class="form-text"></div>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary allow-demo" />
            </div>
        </form>

        <details class="mb-2">
            <summary class="h5">Weight Chart</summary>

            <div style="height:min(70vw, 300px)">
                <canvas id="myChart"></canvas>
            </div>
        </details>

        <details class="mb-2">
            <summary class="h5">Sets Chart</summary>

            <div style="height:min(70vw, 300px)">
                <canvas id="myChartSets"></canvas>
            </div>
        </details>

        <details class="mb-2">
            <summary class="h5">Reps Chart</summary>

            <div style="height:min(70vw, 300px)">
                <canvas id="myChartReps"></canvas>
            </div>
        </details>
    }
</div>

<script>
    // Navigated back to the newsletter from the 'Too easy?'/'Too hard?' links. Refresh the demo content.
    if (!!window.performance && window.performance.navigation.type === 2) {
        // Go back to previous webpage
        window.history.back();
        // Go-back failed
        window.close();
    }
</script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
<script>
    if (document.getElementById('myChart')) {
        Chart.defaults.font.size = 16;
        new Chart(document.getElementById('myChart'), {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Weight',
                    data: @Json.Serialize(Model.Xys),
                    fill: false,
                    spanGaps: true,
                    showLine: true,
                    stepped: 'before',
                }],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                elements: {
                    point: {
                        // Increase the radius around the point when the tooltip shows
                        hitRadius: 5,
                        // Increase the size of the point when the user is withing the bounds of the hitRadius
                        hoverRadius: 5,
                    },
                },
                scales: {
                    y: {
                        type: 'linear',
                        beginAtZero: false,
                        // How much blank space to add in above and below y-axis data?
                        grace: '5%',
                        title: {
                            // Display a label for the y-axis
                            display: false,
                            text: 'Weight',
                        },
                        ticks: {
                            color: 'skyblue',
                            // No decimal places
                            precision: 0,
                        },
                    },
                    // https://www.chartjs.org/docs/next/axes/cartesian/time.html
                    x: {
                        type: 'time',
                        time: {
                            minUnit: 'day',
                        },
                        ticks: {
                            color: 'skyblue',
                            major: {
                                // Allow displaying June 1st as just June
                                enabled: true,
                            },
                            font: (context) => {
                                // Bold major data points (June is bolded, June 11th is not)
                                return { weight: (context.tick && context.tick.major) ? 'bold' : '' };
                            }
                        },
                    },
                },
                plugins: {
                    legend: {
                        // Don't show the graph legend
                        display: false,
                    },
                    tooltip: {
                        callbacks: {
                            title: (context) => {
                                // Pretty-print the x-axis date in the hover tooltip
                                return context.map(c => new Date(c.parsed.x).toDateString());
                            },
                        },
                    },
                    /*
                    decimation: {
                        enabled: true,
                        algorithm: 'lttb',
                        samples: 12,
                    },
                    decimation: {
                        enabled: true,
                        algorithm: 'min-max',
                    },
                    */
                },
            }
        });
    }

    if (document.getElementById('myChartSets')) {
        Chart.defaults.font.size = 16;
        new Chart(document.getElementById('myChartSets'), {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Weight',
                    data: @Json.Serialize(Model.SetXys),
                    fill: false,
                    spanGaps: true,
                    showLine: true,
                    stepped: 'before',
                }],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                elements: {
                    point: {
                        // Increase the radius around the point when the tooltip shows
                        hitRadius: 5,
                        // Increase the size of the point when the user is withing the bounds of the hitRadius
                        hoverRadius: 5,
                    },
                },
                scales: {
                    y: {
                        type: 'linear',
                        beginAtZero: false,
                        // How much blank space to add in above and below y-axis data?
                        grace: '5%',
                        title: {
                            // Display a label for the y-axis
                            display: false,
                            text: 'Weight',
                        },
                        ticks: {
                            color: 'skyblue',
                            // No decimal places
                            precision: 0,
                        },
                    },
                    // https://www.chartjs.org/docs/next/axes/cartesian/time.html
                    x: {
                        type: 'time',
                        time: {
                            minUnit: 'day',
                        },
                        ticks: {
                            color: 'skyblue',
                            major: {
                                // Allow displaying June 1st as just June
                                enabled: true,
                            },
                            font: (context) => {
                                // Bold major data points (June is bolded, June 11th is not)
                                return { weight: (context.tick && context.tick.major) ? 'bold' : '' };
                            }
                        },
                    },
                },
                plugins: {
                    legend: {
                        // Don't show the graph legend
                        display: false,
                    },
                    tooltip: {
                        callbacks: {
                            title: (context) => {
                                // Pretty-print the x-axis date in the hover tooltip
                                return context.map(c => new Date(c.parsed.x).toDateString());
                            },
                        },
                    },
                    /*
                    decimation: {
                        enabled: true,
                        algorithm: 'lttb',
                        samples: 12,
                    },
                    decimation: {
                        enabled: true,
                        algorithm: 'min-max',
                    },
                    */
                },
            }
        });
    }

    if (document.getElementById('myChartReps')) {
        Chart.defaults.font.size = 16;
        new Chart(document.getElementById('myChartReps'), {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Weight',
                    data: @Json.Serialize(Model.RepXys),
                    fill: false,
                    spanGaps: true,
                    showLine: true,
                    stepped: 'before',
                }],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                elements: {
                    point: {
                        // Increase the radius around the point when the tooltip shows
                        hitRadius: 5,
                        // Increase the size of the point when the user is withing the bounds of the hitRadius
                        hoverRadius: 5,
                    },
                },
                scales: {
                    y: {
                        type: 'linear',
                        beginAtZero: false,
                        // How much blank space to add in above and below y-axis data?
                        grace: '5%',
                        title: {
                            // Display a label for the y-axis
                            display: false,
                            text: 'Weight',
                        },
                        ticks: {
                            color: 'skyblue',
                            // No decimal places
                            precision: 0,
                        },
                    },
                    // https://www.chartjs.org/docs/next/axes/cartesian/time.html
                    x: {
                        type: 'time',
                        time: {
                            minUnit: 'day',
                        },
                        ticks: {
                            color: 'skyblue',
                            major: {
                                // Allow displaying June 1st as just June
                                enabled: true,
                            },
                            font: (context) => {
                                // Bold major data points (June is bolded, June 11th is not)
                                return { weight: (context.tick && context.tick.major) ? 'bold' : '' };
                            }
                        },
                    },
                },
                plugins: {
                    legend: {
                        // Don't show the graph legend
                        display: false,
                    },
                    tooltip: {
                        callbacks: {
                            title: (context) => {
                                // Pretty-print the x-axis date in the hover tooltip
                                return context.map(c => new Date(c.parsed.x).toDateString());
                            },
                        },
                    },
                    /*
                    decimation: {
                        enabled: true,
                        algorithm: 'lttb',
                        samples: 12,
                    },
                    decimation: {
                        enabled: true,
                        algorithm: 'min-max',
                    },
                    */
                },
            }
        });
    }
</script>

