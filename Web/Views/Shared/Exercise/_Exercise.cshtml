@model ViewModels.Newsletter.ExerciseViewModel
@using Controllers
@using Microsoft.AspNetCore.Http.Extensions
@using Code.Extensions
@using Models.Exercise
@using Models.Newsletter
@using ViewModels.Newsletter

@{ 
    bool deloadWeek = (bool)(ViewData[NewsletterController.ViewData_Deload] ?? false);

    var borderColor = Model.Theme switch
    {
        ExerciseTheme.Main => "mediumpurple",
        ExerciseTheme.Warmup => "palevioletred",
        ExerciseTheme.Cooldown => "lightskyblue",
        ExerciseTheme.Extra => "lightsalmon",
        ExerciseTheme.Other => "lightgreen",
        _ => "currentColor"
    };

    var backgroundColor = Model.Theme switch
    {
        ExerciseTheme.Main => "rgba(250,200,250,.1)",
        ExerciseTheme.Warmup => "rgba(250,200,200,.1)",
        ExerciseTheme.Cooldown => "rgba(200,200,250,.1)",
        ExerciseTheme.Extra => "rgba(250,200,150,.1)",
        ExerciseTheme.Other => "rgba(200,250,200,.1)",
        _ => "transparent"
    };
}

<div style="flex:1 0 200px;padding:10px;position:relative;display:flex;flex-direction:column;justify-content:space-between;
            border-bottom:4px @(Model.Verbosity.HasFlag(Verbosity.Normal) ? "solid" : "none");border-image-slice:1;outline:1px solid @borderColor;background-color:@backgroundColor;
            border-image-source:linear-gradient(90deg, transparent @(Model.ExerciseVariation.Progression.Min ?? 0)%, @borderColor @(Model.ExerciseVariation.Progression.Min ?? 0)% @(Model.ExerciseVariation.Progression.Max ?? 100)%, transparent @(Model.ExerciseVariation.Progression.Max ?? 100)%);">
    <div>
        <h3 style="margin-block:0;">
            @if (String.IsNullOrEmpty(Model.Variation.DefaultInstruction?.Link))
            {
                <span style="text-decoration:underline;">@(Model.Variation.Name ?? Model.Exercise.Name)</span>
            }
            else 
            {
                <a target="_blank" href="@(Model.User != null ? Url.StillHereLink(Model.User.Email, Model.User.Token, Model.Variation.DefaultInstruction.Link) : Model.Variation.DefaultInstruction.Link)">
                    @(Model.Variation.Name ?? Model.Exercise.Name)
                </a>
            }
        </h3>

        @if (Model.Variation.Instructions.Any(eg => eg.Equipment.Any()) == true)
        {
            <ul style="margin-block:1ex;padding-inline-start:2ch;">
                @foreach (var instruction in Model.Variation.Instructions
                    .Where(eg => eg.Equipment.Any())
                    .Where(eg => eg.Parent == null)
                    // Only show the optional equipment groups that the user owns equipment out of
                    .Where(eg => Model.User == null || Model.User.EquipmentIds.Intersect(eg.Equipment.Select(e => e.Id)).Any())
                    .OrderByDescending(eg => eg.Children.Any()))
                {
                    <li style="list-style-type:@(instruction.Children.Any() ? "circle" : "disc")">
                        <small><partial name="Exercise/_Instruction" model="new InstructionViewModel(instruction, Model.User)" /></small>
                        @if (instruction.Children.Any())
                        {
                            <ul style="margin-block:0;padding-inline-start:2ch;">
                                @foreach (var childInstruction in instruction.Children
                                    .Where(eg => eg.Equipment.Any())
                                    // Only show the optional equipment groups that the user owns equipment out of
                                    .Where(eg => Model.User == null || Model.User.EquipmentIds.Intersect(eg.Equipment.Select(e => e.Id)).Any())
                                    .OrderBy(eg => eg.IsWeight))
                                {
                                    <li style="line-height:1;list-style-type:disc">
                                        <small><partial name="Exercise/_Instruction" model="new InstructionViewModel(childInstruction, Model.User)" /></small>
                                    </li>
                                }
                            </ul>
                        }
                    </li>
                }
            </ul>
        }

        <div style="margin-block:1ex;">
            @Html.DisplayFor(m => Model.Proficiencies)
        </div>

        @if (Model.Verbosity.HasFlag(Verbosity.Detailed) && Model.Variation.StrengthMuscles != MuscleGroups.None) 
        {
            <div style="margin-block:1ex;font-size:x-small;"><b>Strength</b>: @Model.Variation.StrengthMuscles.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
        }

        @if (Model.Verbosity.HasFlag(Verbosity.Detailed) && Model.Variation.StretchMuscles != MuscleGroups.None)
        {
            <div style="margin-block:1ex;font-size:x-small;"><b>Stretch</b>: @Model.Variation.StretchMuscles.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
        }

        @if (Model.Verbosity.HasFlag(Verbosity.Diagnostic) && Model.Variation.StabilityMuscles != MuscleGroups.None)
        {
            <div style="margin-block:1ex;font-size:x-small;"><b>Stability</b>: @Model.Variation.StabilityMuscles.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
        }

        @if (Model.Verbosity.HasFlag(Verbosity.Debug))
        {
            <div style="margin-block:1ex;">
                <div style="margin-block:.1ex;">
                    <small><b>Exercise Type</b> - @Model.ExerciseVariation.ExerciseType.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>
                </div>

                <div style="margin-block:.1ex;">
                    <small><b>Muscle Contractions</b> - @Model.Variation.MuscleContractions.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>
                </div>

                <div style="margin-block:.1ex;">
                    <small><b>Muscle Movement</b> - @Model.Variation.MuscleMovement.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>
                </div>

                <div style="margin-block:.1ex;">
                    <small><b>Movement Pattern</b> - @Model.Variation.MovementPattern.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName, includeAnyMatching: true)</small>
                </div>

                <div style="margin-block:.1ex;">
                    <small><b>Anti-Gravity</b> - @(Model.Variation.AntiGravity)</small>
                </div>

                <div style="margin-block:.1ex;">
                    <small><b>Bonus</b> - @Model.ExerciseVariation.Bonus.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>
                </div>

                <div style="margin-block:.1ex;">
                    <small><b>Is Weighted</b> - @Model.Variation.Instructions.Any(eg => eg.IsWeight || (eg.Children.Any(ceg => ceg.IsWeight)))</small>
                </div>

                <div style="margin-block:.1ex;">
                    <small><b>Is Unilateral</b> - @Model.Variation.Unilateral</small>
                </div>
            </div>
        }

        @if (Model.Verbosity.HasFlag(Verbosity.Minimal)) 
        {
            if (Model.InEmailContext)
            {
                <div style="aspect-ratio:3/2;min-height:150px;max-height:256px;background-size:contain;background-repeat:no-repeat;background-image:url('@Url.AbsoluteContent($"~/images/{Model.Variation.ImageCode}")');"></div>
            }
            else 
            {
                <img style="height:200px;width:300px;object-fit:contain;object-position:left top;" height="200" width="300" loading="lazy"
                     src="@Url.AbsoluteContent($"~/images/{Model.Variation.ImageCode}")">
            }
        }
    </div>
    
    @* Don't allow them to progress variations when a deload week is happening. *@
    @if (Model.User != null && !deloadWeek && (Model.HasHigherProgressionVariation || Model.HasLowerProgressionVariation || (!Model.Demo && Model.Exercise.RecoveryMuscle == MuscleGroups.None)))
    {
        <div style="padding-top:1ex;display:flex;column-gap:1ch;">
            <div>
                @if (Model.HasLowerProgressionVariation)
                {
                    <small style="white-space:nowrap;">
                        <a href="@Url.StillHereLink(Model.User.Email, Model.User.Token, Url.ActionLink(nameof(UserController.ThatWorkoutWasTough), UserController.Name, new { Model.User.Email, Model.User.Token, ExerciseId = Model.Exercise.Id }))">&lt; Regress</a>
                    </small>
                    @if (Model.Verbosity.HasFlag(Verbosity.Normal) && Model.EasierVariation != null)
                    {
                        <div style="font-size:xx-small;">@Model.EasierVariation</div>
                    }
                }
                else if (!Model.Demo && Model.Exercise.IsPlainExercise && Model.UserProgressionInRange)
                {
                    <small>
                        <a href="@Url.StillHereLink(Model.User.Email, Model.User.Token, Url.ActionLink(nameof(UserController.IgnoreExercise), UserController.Name, new { Model.User.Email, Model.User.Token, ExerciseId = Model.Exercise.Id }))">Ignore</a>
                    </small>
                    @if (Model.Verbosity.HasFlag(Verbosity.Normal))
                    {
                        <div style="font-size:xx-small;">@Model.Exercise.Name</div>
                    }
                }
            </div>
            @* Don't confuse the user by allowing them to progress when they have already progressed past this exercise. *@
            @if (Model.UserProgressionInRange)
            {
                <div style="margin-left:auto;text-align:end;">
                    @if (Model.HasHigherProgressionVariation)
                    {
                        <small style="white-space:nowrap;">
                            <a href="@Url.StillHereLink(Model.User.Email, Model.User.Token, Url.ActionLink(nameof(UserController.ThatWorkoutWasEasy), UserController.Name, new { Model.User.Email, Model.User.Token, ExerciseId = Model.Exercise.Id }))">Progress &gt;</a>
                        </small>
                        @if (Model.Verbosity.HasFlag(Verbosity.Normal) && Model.HarderVariation != null)
                        {
                            <div style="font-size:xx-small;">@Model.HarderVariation</div>
                        }
                    }
                    else if (!Model.Demo && Model.Exercise.IsPlainExercise)
                    {
                        <small>
                            <a href="@Url.StillHereLink(Model.User.Email, Model.User.Token, Url.ActionLink(nameof(UserController.IgnoreExercise), UserController.Name, new { Model.User.Email, Model.User.Token, ExerciseId = Model.Exercise.Id }))">Ignore</a>
                        </small>
                        @if (Model.Verbosity.HasFlag(Verbosity.Normal))
                        {
                            <div style="font-size:xx-small;">@Model.Exercise.Name</div>
                        }
                    }
                </div>
            }
        </div>
    }

    @if (Model.Verbosity.HasFlag(Verbosity.Normal) && Model.UserExercise != null)
    {
        var progressionOutOfRange = Model.UserExercise.Progression < Model.ExerciseVariation.Progression.Min || Model.UserExercise.Progression > Model.ExerciseVariation.Progression.Max;
        <div style="position:absolute;bottom:0;left:calc(@Model.UserExercise.Progression% - 1ch);width:2ch;text-align:center;font-size:xx-small;line-height:1;@(progressionOutOfRange ? "color:red" : "")">
            &#9660;
        </div>
    }
    
    @if (Model.Verbosity.HasFlag(Verbosity.Diagnostic))
    {
        if (Model.ExerciseVariation.Progression.Min.HasValue) 
        {
            <div style="line-height:1;position:absolute;bottom:0;font-size:xx-small;font-weight:bold;
                        left:max(0%, calc(@Model.ExerciseVariation.Progression.Min% - @(Model.ExerciseVariation.Progression.Min.Value.ToString().Length)ch));">
                @Model.ExerciseVariation.Progression.Min
            </div>
        }

        if (Model.ExerciseVariation.Progression.Max.HasValue)
        {
            <div style="line-height:1;position:absolute;bottom:0;font-size:xx-small;font-weight:bold;
                        left:min(calc(100% - @(Model.ExerciseVariation.Progression.Max.Value.ToString().Length)ch), @Model.ExerciseVariation.Progression.Max%);">
                @Model.ExerciseVariation.Progression.Max
            </div>
        }
    }
</div>