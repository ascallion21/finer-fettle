@model IList<ProficiencyViewModel>
@using Models.Exercise

@{
    bool deloadWeek = (bool)(ViewData[ViewData_Newsletter.NeedsDeload] ?? false);

    void Pounds(ProficiencyViewModel item)
    {
        if (item.User != null 
            && item.UserVariation != null 
            && item.Intensity.Variation.IsWeighted)
        {
            if (deloadWeek || item.Demo)
            {
                <span> (@item.UserVariation.Pounds#)</span>
            }
            else
            {
                <span> (<a href="@Url.StillHereLink(item.User.Email, item.User.Token, Url.ActionLink(nameof(UserController.EditVariation), UserController.Name, new { item.User.Email, item.User.Token, item.UserVariation.VariationId }))">@item.UserVariation.Pounds#</a>)</span>
            }
        }
    }
}

@functions {
    string Secs(Entities.Exercise.Proficiency proficiency)
    {
        return $"{proficiency.Secs}s";
    }

    string Sets(Entities.Exercise.Proficiency proficiency)
    {
        return $"{proficiency.Sets} {(proficiency.Sets == 1 ? "set" : "sets")}";
    }

    string Reps(Entities.Exercise.Proficiency proficiency)
    {
        return proficiency.MinReps == proficiency.MaxReps
            ? $"{proficiency.MinReps} reps"
            : $"{proficiency.MinReps}-{proficiency.MaxReps} reps";
    }
}

@foreach (var proficiency in Model)
{
    <div>
        <h5 style="margin-block-end:0;margin-block-start:.25rem;">
            @if (proficiency.ShowName)
            {
                @:<span style="text-decoration:underline;">@proficiency.Intensity.IntensityLevel.GetSingleDisplayName()</span>:
            }
            @if (proficiency.Intensity.Proficiency.MinReps.HasValue || proficiency.Intensity.Proficiency.MaxReps.HasValue)
            {
                <span>@Sets(proficiency.Intensity.Proficiency) of @Reps(proficiency.Intensity.Proficiency) @(proficiency.Intensity.Variation.Unilateral ? "(ea. side)" : "") @{Pounds(proficiency);}</span>
            }
            else if (proficiency.Intensity.Proficiency.Secs.HasValue && proficiency.Intensity.Variation.MuscleContractions.HasAnyFlag32(MuscleContractions.Dynamic))
            {
                <span>@Sets(proficiency.Intensity.Proficiency) of @Secs(proficiency.Intensity.Proficiency) @(proficiency.Intensity.Variation.Unilateral ? "(ea. side)" : "") @{Pounds(proficiency);}</span>
            } 
            else 
            {
                <span>@Sets(proficiency.Intensity.Proficiency) of @Secs(proficiency.Intensity.Proficiency) holds @(proficiency.Intensity.Variation.Unilateral ? "(ea. side)" : "") @{Pounds(proficiency);}</span>
            }
        </h5>

        @if (proficiency.FirstTimeViewing) 
        {
            <h6 style="margin-block:0;font-weight:normal;">First time? Take it easy working the new movement and focus on your form.</h6>
        }
        else
        {
            if (proficiency.Intensity.Proficiency.Secs != null 
                && (proficiency.Intensity.Proficiency.MinReps != null || proficiency.Intensity.Proficiency.MaxReps != null))
            {
                if (proficiency.Intensity.Variation.MuscleContractions.HasFlag(MuscleContractions.Static))
                {
                    <h6 style="margin-block:0;font-weight:normal;">Hold the peak of each rep for @Secs(proficiency.Intensity.Proficiency).</h6>
                }
                else if (!deloadWeek)
                {
                    <h6 style="margin-block:0;font-weight:normal;">&star;&nbsp;<i>Hold the peak of each rep for @Secs(proficiency.Intensity.Proficiency).</i></h6>
                }
            }

            if (!deloadWeek 
                && proficiency.Intensity.Variation.AntiGravity
                && proficiency.Intensity.Variation.MuscleContractions.HasFlag(MuscleContractions.Eccentric)
                && (proficiency.Intensity.Proficiency.MinReps != null || proficiency.Intensity.Proficiency.MaxReps != null))
            {
                <h6 style="margin-block:0;font-weight:normal;">&star;&nbsp;<i>Prolong the eccentric "lowering" phase of each rep.</i></h6>
            }
        }
    </div>
}