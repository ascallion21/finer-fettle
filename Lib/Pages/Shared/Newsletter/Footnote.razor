@page "/newsletter/footnote"
@inject NewsletterService NewsletterService
@inject DisplayHelper DH
@inject NewsletterState NewsletterState
@using System.Net
@using Core.Models.Footnote
@using Core.Models.Newsletter

@functions {
    RenderFragment? Debug(ViewModels.Footnote.FootnoteViewModel footnote)
    {
        return Verbosity.HasFlag(Verbosity.Debug)
            ? @<b>@footnote.Type.GetSingleDisplayName() - </b>
            : null;
    }
}

@if (Footnotes == null)
{
    <div>Loading footnotes...</div>
}
else if (Footnotes.Any())
{
    <div style="background-color:lavender;padding:1rem;margin-block:1rem;">
        <ul style="padding-inline-start:2ch;margin-block:0;display:grid;gap:1ex;">
            @foreach (var note in Footnotes.OrderBy(f => f.Type).ThenBy(f => Verbosity == Verbosity.Debug ? f.Note : Guid.NewGuid().ToString()))
            {
                if (string.IsNullOrWhiteSpace(note.Source))
                {
                    <li>@Debug(note)@note.Note</li>
                }
                else
                {
                    var sourceIsLink = Uri.IsWellFormedUriString(note.Source, UriKind.Absolute);
                    if (sourceIsLink)
                    {
                        var sourceAsLink = new Uri(note.Source, UriKind.Absolute);
                        <li>@Debug(note)@note.Note <a target="_blank" href="@note.Source">[@sourceAsLink.Host.Replace("www.", string.Empty)]</a></li>
                    }
                    else
                    {
                        <li>@Debug(note)@note.Note — @note.Source</li>
                    }
                }
            }
        </ul>
    </div>
}

@code {
    [Parameter]
    public int Count { get; set; } = 2;

    [Parameter, EditorRequired]
    [SupplyParameterFromQuery]
    public Verbosity Verbosity { get; set; }

    [Parameter]
    public FootnoteType OfType { get; set; } = FootnoteType.All;

    private IList<ViewModels.Footnote.FootnoteViewModel>? Footnotes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Footnotes = await NewsletterService.GetFootnotes(NewsletterState.User, Count, OfType);

        await base.OnInitializedAsync();
    }
}