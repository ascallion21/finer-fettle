@page "/exercise/exercise"
@inject DisplayHelper DH
@inject NewsletterState AppState
@inject IOptions<SiteSettings> SiteSettings
@using Core.Consts;
@using Lib.ViewModels.Newsletter
@using Core.Models.Options
@using Microsoft.Extensions.Options
@using Core.Models.Exercise
@using Core.Models.User
@using Core.Models.Newsletter

@{ 
    bool deloadWeek = false;

    var borderColor = Model.Theme switch
    {
        ExerciseTheme.Warmup => "palevioletred",
        ExerciseTheme.Main => "mediumpurple",
        ExerciseTheme.Cooldown => "lightskyblue",
        ExerciseTheme.Extra => "lightgreen",
        ExerciseTheme.Other => "lightsalmon",
        _ => "currentColor"
    };

    var backgroundColor = Model.Theme switch
    {
        ExerciseTheme.Warmup => "rgba(250,200,200,.1)",
        ExerciseTheme.Main => "rgba(250,200,250,.1)",
        ExerciseTheme.Cooldown => "rgba(200,200,250,.1)",
        ExerciseTheme.Extra => "rgba(200,250,200,.1)",
        ExerciseTheme.Other => "rgba(250,200,150,.1)",
        _ => "transparent"
    };
}

@*
    Use `em` for spacing and font sizes--it's more consistent across fonts/mediums.
*@

<div style="flex:1 0 @(Model.Verbosity.HasFlag(Verbosity.Debug) ? "250px" : "200px");padding:10px;position:relative;display:flex;flex-direction:column;justify-content:space-between;
            border-bottom:4px @(Model.Verbosity.HasFlag(Verbosity.Minimal) ? "solid" : "none");border-image-slice:1;outline:1px solid @borderColor;background-color:@backgroundColor;
            border-image-source:linear-gradient(90deg, transparent @(Model.ExerciseVariation.Progression.Min ?? 0)%, @borderColor @(Model.ExerciseVariation.Progression.Min ?? 0)% @(Model.ExerciseVariation.Progression.Max ?? 100)%, transparent @(Model.ExerciseVariation.Progression.Max ?? 100)%);">
    
    @if (AppState.User != null && !AppState.User.Features.HasFlag(Features.Demo))
    {
        @* Check min and max progression ranges so they don't ignore an exercise outside of their progression range. *@
        <small style="position:absolute;right:0;top:0;padding-inline:1ch;writing-mode:vertical-lr;">
            <a target="_blank" href="@DH.UserLink($"ev/{Model.ExerciseVariation.Id}")">Manage</a>
        </small>
    }
         
    @* For margin-collapse. *@
    <div>
        @* padding-inline-end so title and instruction text doesn't overlap with the Manage link. *@
        <div style="padding-inline-end:1.1ch">
            <h3 style="margin-block-start:0;margin-block-end:.4em;font-size:1.2em;">
                @if (Model.Variation.UseCaution
                    || (Model.Variation.MobilityJoints & (AppState.User?.RehabFocus.As<Joints>() ?? Joints.None)) != 0
                    || (Model.Variation.AllMuscles & (AppState.User?.RehabFocus.As<MuscleGroups>() ?? MuscleGroups.None)) != 0)
                {
                    @:&#9888;
                }
                @if (string.IsNullOrWhiteSpace(Model.Variation.DefaultInstruction?.Link))
                {
                    <span style="text-decoration:underline;">@(Model.Variation.Name ?? Model.Exercise.Name)</span>
                }
                else
                {
                    <a target="_blank" href="@Model.Variation.DefaultInstruction.Link">
                        @(Model.Variation.Name ?? Model.Exercise.Name)
                    </a>
                }
            </h3>

            @if (Model.Variation.HasRootInstructions)
            {
                <ul style="margin-block:0;padding-inline-start:2ch;font-size:.85em;">
                    @foreach (var instruction in Model.Variation.GetRootInstructions(AppState.User))
                    {
                        <li style="margin-block:.35em;list-style-type:@(instruction.HasChildInstructions ? "circle" : "disc");">
                            <_Instruction Model="new InstructionViewModel(instruction, AppState.User)" />
                            @if (instruction.HasChildInstructions)
                            {
                                <ul style="margin-block:0;padding-inline-start:2ch;">
                                    @foreach (var childInstruction in instruction.GetChildInstructions(AppState.User))
                                    {
                                        <li style="margin-block:.25em;list-style-type:disc;">
                                            <_Instruction Model="new InstructionViewModel(childInstruction, AppState.User)" />
                                        </li>
                                    }
                                </ul>
                            }
                        </li>
                    }
                </ul>
            }
        </div>

        <div style="margin-block:.5em;">
            <Lib.Pages.Shared.Exercise.Proficiency Model="Model.Proficiencies" Variation="Model.Variation" />
        </div>

        @if (Model.Verbosity.HasFlag(Verbosity.Detailed) && Model.Variation.StrengthMuscles != MuscleGroups.None) 
        {
            <div style="margin-block:.5em;font-size:x-small;"><b>Strength</b>: @Model.Variation.StrengthMuscles.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
        }

        @if (Model.Verbosity.HasFlag(Verbosity.Diagnostic) && Model.Variation.SecondaryMuscles != MuscleGroups.None)
        {
            <div style="margin-block:.5em;font-size:x-small;"><b>Secondary</b>: @Model.Variation.SecondaryMuscles.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
        }

        @if (Model.Verbosity.HasFlag(Verbosity.Detailed) && Model.Variation.StretchMuscles != MuscleGroups.None)
        {
            <div style="margin-block:.5em;font-size:x-small;"><b>Stretch</b>: @Model.Variation.StretchMuscles.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
        }

        @if (Model.Verbosity.HasFlag(Verbosity.Debug))
        {
            <div style="margin-block:.5em;font-size:x-small;color:darkred"><b>Unused</b>: @MuscleGroups.All.UnsetFlag32(Model.Variation.AllMuscles).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>

            <hr style="margin-block:.5em;" />

            <div style="margin-block:.5em;">
                <small><b>Joints</b> - @Model.Variation.MobilityJoints.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>

                <div style="margin-block:0;font-size:x-small;color:darkred"><b>Unused</b>: @Joints.All.UnsetFlag32(Model.Variation.MobilityJoints).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
            </div>

            <div style="margin-block:.5em;">
                <small><b>Type</b> - @Model.ExerciseVariation.ExerciseType.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>

                <div style="margin-block:0;font-size:x-small;color:darkred"><b>Unused</b>: @ExerciseType.All.UnsetFlag32(Model.ExerciseVariation.ExerciseType).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
            </div>

            <div style="margin-block:.5em;">
                <small><b>Focus</b> - @Model.ExerciseVariation.ExerciseFocus.GetDisplayName322(EnumExtensions.DisplayNameType.ShortName)</small>

                <div style="margin-block:0;font-size:x-small;color:darkred"><b>Unused</b>: @ExerciseFocus.All.UnsetFlag32(Model.ExerciseVariation.ExerciseFocus).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
            </div>

            <div style="margin-block:.5em;">
                <small><b>Sports Focus</b> - @Model.ExerciseVariation.SportsFocus.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>

                <div style="margin-block:0;font-size:x-small;color:darkred"><b>Unused</b>: @Core.Models.User.SportsFocus.All.UnsetFlag32(Model.ExerciseVariation.SportsFocus).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
            </div>

            <div style="margin-block:.5em;">
                <small><b>Muscle Contractions</b> - @Model.Variation.MuscleContractions.GetDisplayName32(EnumExtensions.DisplayNameType.GroupName)</small>

                <div style="margin-block:0;font-size:x-small;color:darkred"><b>Unused</b>: @MuscleContractions.All.UnsetFlag32(Model.Variation.MuscleContractions).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
            </div>

            <div style="margin-block:.5em;">
                <small><b>Muscle Movement</b> - @Model.Variation.MuscleMovement.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>

                <div style="margin-block:0;font-size:x-small;color:darkred"><b>Unused</b>: @MuscleMovement.All.UnsetFlag32(Model.Variation.MuscleMovement).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
            </div>

            <div style="margin-block:.5em;">
                <small><b>Movement Pattern</b> - @Model.Variation.MovementPattern.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName, includeAnyMatching: true)</small>

                <div style="margin-block:0;font-size:x-small;color:darkred"><b>Unused</b>: @MovementPattern.All.UnsetFlag32(Model.Variation.MovementPattern).GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</div>
            </div>

            <div style="margin-block:.5em;">
                <small><b>Anti-Gravity</b> - @(Model.Variation.AntiGravity)</small>
            </div>

            <div style="margin-block:.5em;">
                <small><b>Is Weighted</b> - @Model.Variation.IsWeighted</small>
            </div>

            <div style="margin-block:.5em;">
                <small><b>Is Unilateral</b> - @Model.Variation.Unilateral</small>
            </div>

            @if (!string.IsNullOrWhiteSpace(Model.ExerciseVariation.Notes))
            {
                <div style="margin-block:.5em;">
                    <small><b>EV:Notes</b> - @Model.ExerciseVariation.Notes</small>
                </div>
            }

            @if (!string.IsNullOrWhiteSpace(Model.Variation.Notes))
            {
                <div style="margin-block:.5em;">
                    <small><b>V:Notes</b> - @Model.Variation.Notes</small>
                </div>
            }
        }

        @if (Model.Verbosity.HasFlag(Verbosity.Quiet)) 
        {
            bool showStaticImage = (AppState.User?.ShowStaticImages == true) || Model.Variation.AnimatedImage == null;
            var staticSrc = $"{SiteSettings.Value.CdnLink}/static/{Model.Variation.StaticImage}";
            var animatedSrc = $"{SiteSettings.Value.CdnLink}/animated/{Model.Variation.AnimatedImage}";
            // If we want to reduce layout shift with aspect-ratio, that really needs to be included on the table with the image because our images don't have consistent aspect ratios. 
            // Setting min-height (200 / (25/14)) gets us close though. 25/14 is, for the most part, our widest aspect-ratio.
            <img style="display:block;margin-top:1ex;height:auto;min-height:112px;max-height:200px;max-width:100%;object-fit:contain;object-position:left top;" loading="lazy" src="@(showStaticImage ? staticSrc : animatedSrc)">
            if (Model.Verbosity.HasFlag(Verbosity.Debug))
            {
                <img style="display:block;margin-top:1ex;height:auto;min-height:112px;max-height:200px;max-width:100%;object-fit:contain;object-position:left top;" loading="lazy" src="@(showStaticImage ? animatedSrc : staticSrc)">
            }
        }
    </div>
    
    @* Don't allow them to progress variations when a deload week is happening. *@
    @if (AppState.User != null && Model.UserExercise != null && !deloadWeek)
    {
        <div style="margin-top:1ex;display:flex;column-gap:1ch;font-size:smaller;">
            <div>
                @if (Model.UserExercise.Progression > UserConsts.MinUserProgression
                    // The user's progression may be less than the exercise's min progression when the user is missing equipment or another variation was ignored.
                    && Model.UserExercise.Progression >= Model.ExerciseVariation.Progression.MinOrDefault)
                {
                    <div style="white-space:nowrap;">
                        <a target="_blank" href="@DH.UserLink($"e/{Model.Exercise.Id}/r")">&lt; Regress</a>
                    </div>
                    @if (Model.Verbosity.HasFlag(Verbosity.Normal) && Model.EasierVariation != null)
                    {
                        <div style="font-size:smaller;">@Model.EasierVariation</div>
                    }
                }
                else if (Model.Verbosity.HasFlag(Verbosity.Normal) && Model.EasierReason != null)
                {
                    <div style="white-space:nowrap;">
                        <span style="color:red;">@Model.EasierReason</span>
                    </div>
                    @if (Model.Verbosity.HasFlag(Verbosity.Normal) && Model.EasierVariation != null)
                    {
                        <div style="font-size:smaller;">@Model.EasierVariation</div>
                    }
                }
                else if (Model.UserExercise.Progression == UserConsts.MinUserProgression && !AppState.User.Features.HasFlag(Features.Demo))
                {
                    <div style="white-space:nowrap;">
                        <a target="_blank" href="@DH.UserLink($"e/{Model.Exercise.Id}/s")">Suspend</a>
                    </div>
                }
            </div>
            @* Don't confuse the user by allowing them to progress when they have already progressed past this exercise.
               Don't check if the user min progression is in range b/c we want users to be able to progress if they ignored an easier variation and are now seeing the harder variation. *@
            <div style="margin-left:auto;text-align:end;">
                @if (Model.UserExercise.Progression < UserConsts.MaxUserProgression
                    // The user's progression may be more than the exercise's min progression when the user is missing equipment or another variation was ignored.
                    && Model.UserExercise.Progression < Model.ExerciseVariation.Progression.MaxOrDefault)
                {
                    <div style="white-space:nowrap;">
                        <a target="_blank" href="@DH.UserLink($"e/{Model.Exercise.Id}/p")">Progress &gt;</a>
                    </div>
                    @if (Model.Verbosity.HasFlag(Verbosity.Normal) && Model.HarderVariation != null)
                    {
                        <div style="font-size:smaller;">@Model.HarderVariation</div>
                    }
                }
                else if (Model.Verbosity.HasFlag(Verbosity.Normal) && Model.HarderReason != null)
                {
                    <div style="white-space:nowrap;">
                        <span style="color:red;">@Model.HarderReason</span>
                    </div>
                    @if (Model.Verbosity.HasFlag(Verbosity.Normal) && Model.HarderVariation != null)
                    {
                        <div style="font-size:smaller;">@Model.HarderVariation</div>
                    }
                }
            </div>
        </div>
    }

    @* Displays the ▼ for the user's current progression level. *@
    @if (Model.Verbosity.HasFlag(Verbosity.Minimal) && Model.UserExercise != null)
    {
        var progressionOutOfRange = Model.UserExercise.Progression < Model.ExerciseVariation.Progression.Min || Model.UserExercise.Progression > Model.ExerciseVariation.Progression.Max;
        <div style="position:absolute;bottom:0;left:calc(@Model.UserExercise.Progression% - 1ch);width:2ch;text-align:center;font-size:xx-small;line-height:1;@(progressionOutOfRange ? "color:red" : "")">
            &#9660;
        </div>
    }

    @* Displays a vertical bar on the progression range of the exercise's proficiency. *@
    @if (Model.Verbosity.HasFlag(Verbosity.Minimal))
    {
        <div style="position:absolute;bottom:-4px;left:calc(@Model.Exercise.Proficiency% - 1px);height:4px;width:2px;background-color:currentColor;"></div>
    }
    
    @* Displays the variation's min and max progression range as numbers. *@
    @if (Model.Verbosity.HasFlag(Verbosity.Debug))
    {
        if (Model.ExerciseVariation.Progression.Min.HasValue) 
        {
            <div style="line-height:1;position:absolute;bottom:0;font-size:xx-small;font-weight:bold;
                        left:max(0%, calc(@Model.ExerciseVariation.Progression.Min% - @(Model.ExerciseVariation.Progression.Min.Value.ToString().Length)ch));">
                @Model.ExerciseVariation.Progression.Min
            </div>
        }

        if (Model.ExerciseVariation.Progression.Max.HasValue)
        {
            <div style="line-height:1;position:absolute;bottom:0;font-size:xx-small;font-weight:bold;
                        left:min(calc(100% - @(Model.ExerciseVariation.Progression.Max.Value.ToString().Length)ch), @Model.ExerciseVariation.Progression.Max%);">
                @Model.ExerciseVariation.Progression.Max
            </div>
        }
    }
</div>

@code {
    [Parameter, EditorRequired]
    [SupplyParameterFromQuery]
    public ViewModels.Newsletter.ExerciseViewModel Model { get; set; } = null!;
}