@page "/"
@inject AppState AppState
@inject NewsletterState NewsletterState
@inject DisplayHelper DH
@inject NewsletterService NewsletterService
@inject NavigationManager Navigation
@using Core.Models.Exercise
@using Core.Models.Newsletter
@using Core.Models.Footnote
@using Core.Models.User
@using ViewModels.Exercise

@if (Model == null)
{
    <div>Loading workout...</div>
}
else
{
    var isDebugWorkout = Model.User.Features.HasFlag(Features.Debug);
    var isMobilityWorkout = Model.UserWorkout.Frequency == Core.Models.User.Frequency.OffDayStretches;
    var exerciseNames = string.Join(", ", Model.MainExercises.GroupBy(e => e.Exercise).Select(g => g.Key.Name));

    @if (isDebugWorkout)
    {
        <Lib.Pages.Shared.Newsletter._Preview Model='@($"Debug - {exerciseNames}")' />
    }
    else if (isMobilityWorkout)
    {
        <Lib.Pages.Shared.Newsletter._Preview Model='@($"Mobility - {Model.UserWorkout.WorkoutRotation.MuscleGroups.GetDisplayName322(EnumExtensions.DisplayNameType.ShortName)}")' />
    }
    else
    {
        <Lib.Pages.Shared.Newsletter._Preview Model='@($"{Model.UserWorkout.WorkoutRotation.MuscleGroups.GetDisplayName322(EnumExtensions.DisplayNameType.ShortName)} - {Model.UserWorkout.WorkoutRotation.MovementPatterns.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)}")' />
    }

    <div style="margin-bottom:1rem;">
        <h6 style="margin-block:0;"><a target="_blank" href="@DH.NewsletterLink(Model.Today)">@Model.Today.ToLongDateString()</a></h6>
        <h1 style="margin-block:0;">Daily Workout</h1>
        @if (isDebugWorkout)
        {
            <h4 style="margin-block:0;display:inline-block;">Debug</h4>
            <small> - @exerciseNames</small>
        } 
        else if (isMobilityWorkout)
        {
            <h4 style="margin-block:0;display:inline-block;">Mobility</h4>
            <small> - @Model.UserWorkout.WorkoutRotation.MuscleGroups.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>
        }
        else
        {
            <h4 style="margin-block:0;display:inline-block;">@Model.UserWorkout.WorkoutRotation.MuscleGroups.GetDisplayName322(EnumExtensions.DisplayNameType.ShortName)</h4>
            <small> - @Model.UserWorkout.WorkoutRotation.MovementPatterns.GetDisplayName32(EnumExtensions.DisplayNameType.ShortName)</small>
        }
    </div>

    <Lib.Pages.Shared.Newsletter._UserStatusMessages Model="Model.User" />

    <Lib.Pages.Shared.Newsletter.Footnote OfType="Core.Models.Footnote.FootnoteType.Top"/>

    <div style="margin-block:1rem;">
        <Lib.Pages.Shared.Exercise._ExerciseSection Model='@(new ExerciseSectionViewModel($"Rehab: {Model.User.RehabFocus.GetSingleDisplayName()}", Model.RehabExercises, Model.Verbosity, ExerciseTheme.Extra) { Description = "Use light weights, if any. Do these throughout the day." })' />

        <Lib.Pages.Shared.Newsletter._UserRecoveryMessage Model='Model.User' />

        <Lib.Pages.Shared.Exercise._ExerciseSection Model='@(new ExerciseSectionViewModel("Warmup", Model.WarmupExercises, Model.Verbosity, ExerciseTheme.Warmup) { Description = "Use light weights, if any. Aim to get your heart rate up with 5-10 minutes of cardio." })' />

        <Lib.Pages.Shared.Newsletter._UserDeloadMessage Model='Model.UserWorkout' />

        <Lib.Pages.Shared.Exercise._ExerciseSection Model='@(new ExerciseSectionViewModel($"Sport: {Model.User.SportsFocus.GetSingleDisplayName()}", Model.SportsExercises, Model.Verbosity, ExerciseTheme.Other))' />

        @{ var mainTitle = isDebugWorkout ? null : "Workout"; }
        @{ var mainDesc = Model.UserWorkout.IsDeloadWeek ? "Use light weights, if any. Rest between sets for 30s or less for muscular endurance." : "Start off with a lightweight warmup set. Rest between sets for 30-90s or 2-5min for hypertrophy or strength, respectively."; }
        <Lib.Pages.Shared.Exercise._ExerciseSection Model='@(new ExerciseSectionViewModel(mainTitle, Model.MainExercises, Model.Verbosity, ExerciseTheme.Main) { Description = mainDesc })' />

        <Lib.Pages.Shared.Exercise._ExerciseSection Model='@(new ExerciseSectionViewModel("Prehab", Model.PrehabExercises, Model.Verbosity, ExerciseTheme.Extra) { Description = "Use light weights, if any. Rest between sets for 30s or less for muscular endurance." })' />

        <Lib.Pages.Shared.Exercise._ExerciseSection Model='@(new ExerciseSectionViewModel("Cooldown", Model.CooldownExercises, Model.Verbosity, ExerciseTheme.Cooldown) { Description = "Or work through a full-body Yoga routine." })' />
    </div>

    <Lib.Pages.Shared.Newsletter.Footnote OfType="Core.Models.Footnote.FootnoteType.Bottom" />

    @if (isDebugWorkout)
    {
        <Lib.Pages.Shared.Exercise._Debug />
    }

    <hr style="margin-block:1ex;">

    <Lib.Pages.Shared.Newsletter.Footer AllEquipment="Model.Equipment.AllEquipment" UserEquipment="Model.Equipment.UserEquipment" />
}

@code {
    [Parameter]
    public ViewModels.Newsletter.NewsletterViewModel? Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Model == null)
        {
            Model = await NewsletterService.Newsletter(AppState.Email, AppState.Token, AppState.Date ?? DateOnly.FromDateTime(DateTime.UtcNow));
        }

        NewsletterState.User = Model!.User;
    }
}